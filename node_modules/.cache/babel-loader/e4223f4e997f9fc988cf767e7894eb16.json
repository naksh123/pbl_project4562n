{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naksh\\\\OneDrive\\\\Desktop\\\\packing-list\\\\src\\\\components\\\\TravelCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Card, { CardSection } from \"@kiwicom/orbit-components/lib/Card\";\nimport Button from \"@kiwicom/orbit-components/lib/Button\";\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\";\nimport { Plus } from \"@kiwicom/orbit-components/lib/icons\";\nimport TravelItem from \"./TravelItem\";\nimport SettingsPopover from \"./SettingsPopover\";\nimport useLocalStorage from \"../services/hooks/useLocalStorage\";\nimport { EDIT_MODE } from \"../services/consts\";\nimport CategoryIcon from \"./CategoryIcon\";\nimport useTranslatedCategory from \"../services/hooks/useTranslatedCategory\";\nimport AddItemControls from \"./AddItemControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TravelCard = _ref => {\n  _s();\n\n  let {\n    category,\n    initialCardItems\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const translatedCategory = useTranslatedCategory(category);\n  const [cardItems, setCardItems] = useLocalStorage(`travel-packing-list:list-${category}`, initialCardItems);\n  const [editMode, setEditMode] = useState(EDIT_MODE.DEFAULT);\n  const isRemoveItemsMode = editMode === EDIT_MODE.REMOVE_ITEMS;\n\n  const toggleSettings = () => {\n    if (editMode === EDIT_MODE.OPEN_SETTINGS) {\n      setEditMode(EDIT_MODE.DEFAULT);\n    } else {\n      setEditMode(EDIT_MODE.OPEN_SETTINGS);\n    }\n  };\n\n  const handleDeleteItem = itemTKey => {\n    setCardItems(cardItems.filter(item => item.tKey !== itemTKey));\n  };\n\n  const toggleCheckedItem = itemTKey => {\n    setCardItems(cardItems.map(item => item.tKey === itemTKey ? { ...item,\n      isChecked: !item.isChecked\n    } : item));\n  };\n\n  const handleResetCard = () => {\n    setCardItems(initialCardItems);\n    setEditMode(EDIT_MODE.DEFAULT);\n  };\n\n  const handleDeselectAll = () => {\n    setCardItems(cardItems.map(item => ({ ...item,\n      isChecked: false\n    })));\n    setEditMode(EDIT_MODE.DEFAULT);\n  };\n\n  const handleSelectAll = () => {\n    setCardItems(cardItems.map(item => ({ ...item,\n      isChecked: true\n    })));\n    setEditMode(EDIT_MODE.DEFAULT);\n  };\n\n  const handleSubmitNewItem = newItemValue => {\n    setCardItems([...cardItems, {\n      tKey: newItemValue,\n      isChecked: false\n    }]);\n    setEditMode(EDIT_MODE.DEFAULT);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: /*#__PURE__*/_jsxDEV(\"span\", {\n      id: category,\n      style: {\n        scrollMarginTop: \"65px\"\n      },\n      children: translatedCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this),\n    titleAs: \"h2\",\n    icon: /*#__PURE__*/_jsxDEV(CategoryIcon, {\n      category: category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this),\n    actions: /*#__PURE__*/_jsxDEV(SettingsPopover, {\n      translatedCategory: translatedCategory,\n      toggleSettings: toggleSettings,\n      handleShowDelete: () => setEditMode(EDIT_MODE.REMOVE_ITEMS),\n      handleResetCard: handleResetCard,\n      handleDeselectAll: handleDeselectAll,\n      handleSelectAll: handleSelectAll,\n      isSettingsOpened: editMode === EDIT_MODE.OPEN_SETTINGS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(CardSection, {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"column\",\n        spacing: \"medium\",\n        desktop: {\n          spacing: \"XSmall\"\n        },\n        children: [cardItems.map(item => /*#__PURE__*/_jsxDEV(TravelItem, {\n          item: item,\n          shouldShowDeleteButton: isRemoveItemsMode,\n          toggleCheckedItem: toggleCheckedItem,\n          handleDeleteItem: handleDeleteItem\n        }, item.tKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)), editMode === EDIT_MODE.ADD_ITEM ? /*#__PURE__*/_jsxDEV(AddItemControls, {\n          handleSubmitNewItem: handleSubmitNewItem,\n          doesAlreadyExistInItems: newItemValue => Boolean(cardItems.find(item => newItemValue === t(item.tKey)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          justify: \"between\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"secondary\",\n            iconLeft: /*#__PURE__*/_jsxDEV(Plus, {\n              ariaHidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 27\n            }, this),\n            size: \"small\",\n            onClick: () => setEditMode(EDIT_MODE.ADD_ITEM),\n            disabled: isRemoveItemsMode,\n            children: t(\"button.add_item\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), isRemoveItemsMode && /*#__PURE__*/_jsxDEV(Button, {\n            type: \"critical\",\n            size: \"small\",\n            onClick: () => setEditMode(EDIT_MODE.DEFAULT),\n            children: t(\"button.done\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TravelCard, \"AHfa4wl+nd5VE90SHrg66UJQ9EY=\", false, function () {\n  return [useTranslation, useTranslatedCategory, useLocalStorage];\n});\n\n_c = TravelCard;\nexport default TravelCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TravelCard\");","map":{"version":3,"sources":["C:/Users/naksh/OneDrive/Desktop/packing-list/src/components/TravelCard.js"],"names":["React","useState","useTranslation","Card","CardSection","Button","Stack","Plus","TravelItem","SettingsPopover","useLocalStorage","EDIT_MODE","CategoryIcon","useTranslatedCategory","AddItemControls","TravelCard","category","initialCardItems","t","translatedCategory","cardItems","setCardItems","editMode","setEditMode","DEFAULT","isRemoveItemsMode","REMOVE_ITEMS","toggleSettings","OPEN_SETTINGS","handleDeleteItem","itemTKey","filter","item","tKey","toggleCheckedItem","map","isChecked","handleResetCard","handleDeselectAll","handleSelectAll","handleSubmitNewItem","newItemValue","scrollMarginTop","spacing","ADD_ITEM","Boolean","find"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,IAAeC,WAAf,QAAkC,oCAAlC;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AACA,SAASC,IAAT,QAAqB,qCAArB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAOA,MAAMC,UAAU,GAAG,QAAuD;AAAA;;AAAA,MAAtD;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAsD;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAQhB,cAAc,EAA5B;AACA,QAAMiB,kBAAkB,GAAGN,qBAAqB,CAACG,QAAD,CAAhD;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BX,eAAe,CAC9C,4BAA2BM,QAAS,EADU,EAE/CC,gBAF+C,CAAjD;AAIA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAACU,SAAS,CAACa,OAAX,CAAxC;AAEA,QAAMC,iBAAiB,GAAGH,QAAQ,KAAKX,SAAS,CAACe,YAAjD;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAIL,QAAQ,KAAKX,SAAS,CAACiB,aAA3B,EAA0C;AACxCL,MAAAA,WAAW,CAACZ,SAAS,CAACa,OAAX,CAAX;AACD,KAFD,MAEO;AACLD,MAAAA,WAAW,CAACZ,SAAS,CAACiB,aAAX,CAAX;AACD;AACF,GAND;;AAQA,QAAMC,gBAAgB,GAAIC,QAAD,IAAsB;AAC7CT,IAAAA,YAAY,CAACD,SAAS,CAACW,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcH,QAAvC,CAAD,CAAZ;AACD,GAFD;;AAIA,QAAMI,iBAAiB,GAAIJ,QAAD,IAAsB;AAC9CT,IAAAA,YAAY,CACVD,SAAS,CAACe,GAAV,CAAcH,IAAI,IAChBA,IAAI,CAACC,IAAL,KAAcH,QAAd,GAAyB,EAAE,GAAGE,IAAL;AAAWI,MAAAA,SAAS,EAAE,CAACJ,IAAI,CAACI;AAA5B,KAAzB,GAAmEJ,IADrE,CADU,CAAZ;AAKD,GAND;;AAQA,QAAMK,eAAe,GAAG,MAAM;AAC5BhB,IAAAA,YAAY,CAACJ,gBAAD,CAAZ;AACAM,IAAAA,WAAW,CAACZ,SAAS,CAACa,OAAX,CAAX;AACD,GAHD;;AAKA,QAAMc,iBAAiB,GAAG,MAAM;AAC9BjB,IAAAA,YAAY,CAACD,SAAS,CAACe,GAAV,CAAcH,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWI,MAAAA,SAAS,EAAE;AAAtB,KAAL,CAAlB,CAAD,CAAZ;AACAb,IAAAA,WAAW,CAACZ,SAAS,CAACa,OAAX,CAAX;AACD,GAHD;;AAKA,QAAMe,eAAe,GAAG,MAAM;AAC5BlB,IAAAA,YAAY,CAACD,SAAS,CAACe,GAAV,CAAcH,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWI,MAAAA,SAAS,EAAE;AAAtB,KAAL,CAAlB,CAAD,CAAZ;AACAb,IAAAA,WAAW,CAACZ,SAAS,CAACa,OAAX,CAAX;AACD,GAHD;;AAKA,QAAMgB,mBAAmB,GAAIC,YAAD,IAA0B;AACpDpB,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe;AAAEa,MAAAA,IAAI,EAAEQ,YAAR;AAAsBL,MAAAA,SAAS,EAAE;AAAjC,KAAf,CAAD,CAAZ;AACAb,IAAAA,WAAW,CAACZ,SAAS,CAACa,OAAX,CAAX;AACD,GAHD;;AAKA,sBACE,QAAC,IAAD;AACE,IAAA,KAAK,eACH;AAAM,MAAA,EAAE,EAAER,QAAV;AAAoB,MAAA,KAAK,EAAE;AAAE0B,QAAAA,eAAe,EAAE;AAAnB,OAA3B;AAAA,gBACGvB;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ;AAME,IAAA,OAAO,EAAC,IANV;AAOE,IAAA,IAAI,eAAE,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAEH;AAAxB;AAAA;AAAA;AAAA;AAAA,YAPR;AAQE,IAAA,OAAO,eACL,QAAC,eAAD;AACE,MAAA,kBAAkB,EAAEG,kBADtB;AAEE,MAAA,cAAc,EAAEQ,cAFlB;AAGE,MAAA,gBAAgB,EAAE,MAAMJ,WAAW,CAACZ,SAAS,CAACe,YAAX,CAHrC;AAIE,MAAA,eAAe,EAAEW,eAJnB;AAKE,MAAA,iBAAiB,EAAEC,iBALrB;AAME,MAAA,eAAe,EAAEC,eANnB;AAOE,MAAA,gBAAgB,EAAEjB,QAAQ,KAAKX,SAAS,CAACiB;AAP3C;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,2BAoBE,QAAC,WAAD;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,SAAS,EAAC,QAAjB;AAA0B,QAAA,OAAO,EAAC,QAAlC;AAA2C,QAAA,OAAO,EAAE;AAAEe,UAAAA,OAAO,EAAE;AAAX,SAApD;AAAA,mBACGvB,SAAS,CAACe,GAAV,CAAcH,IAAI,iBACjB,QAAC,UAAD;AAEE,UAAA,IAAI,EAAEA,IAFR;AAGE,UAAA,sBAAsB,EAAEP,iBAH1B;AAIE,UAAA,iBAAiB,EAAES,iBAJrB;AAKE,UAAA,gBAAgB,EAAEL;AALpB,WACOG,IAAI,CAACC,IADZ;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,EAUGX,QAAQ,KAAKX,SAAS,CAACiC,QAAvB,gBACC,QAAC,eAAD;AACE,UAAA,mBAAmB,EAAEJ,mBADvB;AAEE,UAAA,uBAAuB,EAAEC,YAAY,IACnCI,OAAO,CAACzB,SAAS,CAAC0B,IAAV,CAAed,IAAI,IAAIS,YAAY,KAAKvB,CAAC,CAACc,IAAI,CAACC,IAAN,CAAzC,CAAD;AAHX;AAAA;AAAA;AAAA;AAAA,gBADD,gBAQC,QAAC,KAAD;AAAO,UAAA,SAAS,EAAC,KAAjB;AAAuB,UAAA,OAAO,EAAC,SAA/B;AAAA,kCACE,QAAC,MAAD;AACE,YAAA,IAAI,EAAC,WADP;AAEE,YAAA,QAAQ,eAAE,QAAC,IAAD;AAAM,cAAA,UAAU;AAAhB;AAAA;AAAA;AAAA;AAAA,oBAFZ;AAGE,YAAA,IAAI,EAAC,OAHP;AAIE,YAAA,OAAO,EAAE,MAAMV,WAAW,CAACZ,SAAS,CAACiC,QAAX,CAJ5B;AAKE,YAAA,QAAQ,EAAEnB,iBALZ;AAAA,sBAOGP,CAAC,CAAC,iBAAD;AAPJ;AAAA;AAAA;AAAA;AAAA,kBADF,EAUGO,iBAAiB,iBAChB,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,UAAb;AAAwB,YAAA,IAAI,EAAC,OAA7B;AAAqC,YAAA,OAAO,EAAE,MAAMF,WAAW,CAACZ,SAAS,CAACa,OAAX,CAA/D;AAAA,sBACGN,CAAC,CAAC,aAAD;AADJ;AAAA;AAAA;AAAA;AAAA,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AApBF;AAAA;AAAA;AAAA;AAAA,UADF;AA6DD,CAhHD;;GAAMH,U;UACUb,c,EACaW,qB,EACOH,e;;;KAH9BK,U;AAkHN,eAAeA,UAAf","sourcesContent":["// @flow\r\nimport React, { useState } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Card, { CardSection } from \"@kiwicom/orbit-components/lib/Card\"\r\nimport Button from \"@kiwicom/orbit-components/lib/Button\"\r\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\r\nimport { Plus } from \"@kiwicom/orbit-components/lib/icons\"\r\n\r\nimport TravelItem from \"./TravelItem\"\r\nimport SettingsPopover from \"./SettingsPopover\"\r\nimport type { CardItems, ListCategory } from \"../services/types\"\r\nimport useLocalStorage from \"../services/hooks/useLocalStorage\"\r\nimport { EDIT_MODE } from \"../services/consts\"\r\nimport CategoryIcon from \"./CategoryIcon\"\r\nimport useTranslatedCategory from \"../services/hooks/useTranslatedCategory\"\r\nimport AddItemControls from \"./AddItemControls\"\r\n\r\ntype Props = {|\r\n  category: ListCategory,\r\n  initialCardItems: CardItems,\r\n|}\r\n\r\nconst TravelCard = ({ category, initialCardItems }: Props): React$Node => {\r\n  const { t } = useTranslation()\r\n  const translatedCategory = useTranslatedCategory(category)\r\n  const [cardItems, setCardItems] = useLocalStorage<CardItems>(\r\n    `travel-packing-list:list-${category}`,\r\n    initialCardItems,\r\n  )\r\n  const [editMode, setEditMode] = useState(EDIT_MODE.DEFAULT)\r\n\r\n  const isRemoveItemsMode = editMode === EDIT_MODE.REMOVE_ITEMS\r\n\r\n  const toggleSettings = () => {\r\n    if (editMode === EDIT_MODE.OPEN_SETTINGS) {\r\n      setEditMode(EDIT_MODE.DEFAULT)\r\n    } else {\r\n      setEditMode(EDIT_MODE.OPEN_SETTINGS)\r\n    }\r\n  }\r\n\r\n  const handleDeleteItem = (itemTKey: string) => {\r\n    setCardItems(cardItems.filter(item => item.tKey !== itemTKey))\r\n  }\r\n\r\n  const toggleCheckedItem = (itemTKey: string) => {\r\n    setCardItems(\r\n      cardItems.map(item =>\r\n        item.tKey === itemTKey ? { ...item, isChecked: !item.isChecked } : item,\r\n      ),\r\n    )\r\n  }\r\n\r\n  const handleResetCard = () => {\r\n    setCardItems(initialCardItems)\r\n    setEditMode(EDIT_MODE.DEFAULT)\r\n  }\r\n\r\n  const handleDeselectAll = () => {\r\n    setCardItems(cardItems.map(item => ({ ...item, isChecked: false })))\r\n    setEditMode(EDIT_MODE.DEFAULT)\r\n  }\r\n\r\n  const handleSelectAll = () => {\r\n    setCardItems(cardItems.map(item => ({ ...item, isChecked: true })))\r\n    setEditMode(EDIT_MODE.DEFAULT)\r\n  }\r\n\r\n  const handleSubmitNewItem = (newItemValue: string) => {\r\n    setCardItems([...cardItems, { tKey: newItemValue, isChecked: false }])\r\n    setEditMode(EDIT_MODE.DEFAULT)\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <span id={category} style={{ scrollMarginTop: \"65px\" }}>\r\n          {translatedCategory}\r\n        </span>\r\n      }\r\n      titleAs=\"h2\"\r\n      icon={<CategoryIcon category={category} />}\r\n      actions={\r\n        <SettingsPopover\r\n          translatedCategory={translatedCategory}\r\n          toggleSettings={toggleSettings}\r\n          handleShowDelete={() => setEditMode(EDIT_MODE.REMOVE_ITEMS)}\r\n          handleResetCard={handleResetCard}\r\n          handleDeselectAll={handleDeselectAll}\r\n          handleSelectAll={handleSelectAll}\r\n          isSettingsOpened={editMode === EDIT_MODE.OPEN_SETTINGS}\r\n        />\r\n      }\r\n    >\r\n      <CardSection>\r\n        <Stack direction=\"column\" spacing=\"medium\" desktop={{ spacing: \"XSmall\" }}>\r\n          {cardItems.map(item => (\r\n            <TravelItem\r\n              key={item.tKey}\r\n              item={item}\r\n              shouldShowDeleteButton={isRemoveItemsMode}\r\n              toggleCheckedItem={toggleCheckedItem}\r\n              handleDeleteItem={handleDeleteItem}\r\n            />\r\n          ))}\r\n          {editMode === EDIT_MODE.ADD_ITEM ? (\r\n            <AddItemControls\r\n              handleSubmitNewItem={handleSubmitNewItem}\r\n              doesAlreadyExistInItems={newItemValue =>\r\n                Boolean(cardItems.find(item => newItemValue === t(item.tKey)))\r\n              }\r\n            />\r\n          ) : (\r\n            <Stack direction=\"row\" justify=\"between\">\r\n              <Button\r\n                type=\"secondary\"\r\n                iconLeft={<Plus ariaHidden />}\r\n                size=\"small\"\r\n                onClick={() => setEditMode(EDIT_MODE.ADD_ITEM)}\r\n                disabled={isRemoveItemsMode}\r\n              >\r\n                {t(\"button.add_item\")}\r\n              </Button>\r\n              {isRemoveItemsMode && (\r\n                <Button type=\"critical\" size=\"small\" onClick={() => setEditMode(EDIT_MODE.DEFAULT)}>\r\n                  {t(\"button.done\")}\r\n                </Button>\r\n              )}\r\n            </Stack>\r\n          )}\r\n        </Stack>\r\n      </CardSection>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default TravelCard\r\n"]},"metadata":{},"sourceType":"module"}