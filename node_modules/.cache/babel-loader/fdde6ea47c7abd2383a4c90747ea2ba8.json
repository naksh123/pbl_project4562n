{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _getViewportIEGridStyles = _interopRequireDefault(require(\"./getViewportIEGridStyles\"));\n\nvar _getDisplay = _interopRequireDefault(require(\"./getDisplay\"));\n/*\n  We need to get gap, rowGap and columnGap recursively because someone can change row or columns\n  in some mediaQuery, so we need to render IE compatible format once again and we need to know to gaps\n  Also we want to render only own gaps into CSS\n */\n\n\nvar getViewportGridStyles = function getViewportGridStyles(_ref) {\n  var viewport = _ref.viewport,\n      index = _ref.index,\n      devices = _ref.devices;\n  return function (props) {\n    if (props[viewport]) {\n      var _props$viewport = props[viewport],\n          inline = _props$viewport.inline,\n          maxWidth = _props$viewport.maxWidth,\n          gap = _props$viewport.gap,\n          columnGap = _props$viewport.columnGap,\n          rowGap = _props$viewport.rowGap,\n          rows = _props$viewport.rows,\n          columns = _props$viewport.columns,\n          width = _props$viewport.width;\n      var compatibleIE = (0, _getViewportIEGridStyles.default)(props[viewport], React.Children.count(props.children), {\n        index: index,\n        devices: devices\n      }, props);\n      return (0, _styledComponents.css)([\"\", \";max-width:\", \";width:\", \";grid-template-columns:\", \";grid-template-rows:\", \";grid-column-gap:\", \";grid-row-gap:\", \";grid-gap:\", \";\", \";\"], (0, _getDisplay.default)(inline, viewport === \"smallMobile\"), maxWidth, width, columns, rows, columnGap, rowGap, gap, compatibleIE);\n    }\n\n    return (0, _styledComponents.css)([\"\"]);\n  };\n};\n\nvar _default = getViewportGridStyles;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/naksh/OneDrive/Desktop/packing-list/node_modules/@kiwicom/orbit-components/lib/utils/Grid/helpers/getViewportGridStyles.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_styledComponents","_getViewportIEGridStyles","_getDisplay","getViewportGridStyles","_ref","viewport","index","devices","props","_props$viewport","inline","maxWidth","gap","columnGap","rowGap","rows","columns","width","compatibleIE","Children","count","children","css","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAIQ,iBAAiB,GAAGR,OAAO,CAAC,mBAAD,CAA/B;;AAEA,IAAIS,wBAAwB,GAAGV,sBAAsB,CAACC,OAAO,CAAC,2BAAD,CAAR,CAArD;;AAEA,IAAIU,WAAW,GAAGX,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIW,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,IAA/B,EAAqC;AAC/D,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAGA,SAAO,UAAUC,KAAV,EAAiB;AACtB,QAAIA,KAAK,CAACH,QAAD,CAAT,EAAqB;AACnB,UAAII,eAAe,GAAGD,KAAK,CAACH,QAAD,CAA3B;AAAA,UACIK,MAAM,GAAGD,eAAe,CAACC,MAD7B;AAAA,UAEIC,QAAQ,GAAGF,eAAe,CAACE,QAF/B;AAAA,UAGIC,GAAG,GAAGH,eAAe,CAACG,GAH1B;AAAA,UAIIC,SAAS,GAAGJ,eAAe,CAACI,SAJhC;AAAA,UAKIC,MAAM,GAAGL,eAAe,CAACK,MAL7B;AAAA,UAMIC,IAAI,GAAGN,eAAe,CAACM,IAN3B;AAAA,UAOIC,OAAO,GAAGP,eAAe,CAACO,OAP9B;AAAA,UAQIC,KAAK,GAAGR,eAAe,CAACQ,KAR5B;AASA,UAAIC,YAAY,GAAG,CAAC,GAAGjB,wBAAwB,CAACH,OAA7B,EAAsCU,KAAK,CAACH,QAAD,CAA3C,EAAuDN,KAAK,CAACoB,QAAN,CAAeC,KAAf,CAAqBZ,KAAK,CAACa,QAA3B,CAAvD,EAA6F;AAC9Gf,QAAAA,KAAK,EAAEA,KADuG;AAE9GC,QAAAA,OAAO,EAAEA;AAFqG,OAA7F,EAGhBC,KAHgB,CAAnB;AAIA,aAAO,CAAC,GAAGR,iBAAiB,CAACsB,GAAtB,EAA2B,CAAC,EAAD,EAAK,aAAL,EAAoB,SAApB,EAA+B,yBAA/B,EAA0D,sBAA1D,EAAkF,mBAAlF,EAAuG,gBAAvG,EAAyH,YAAzH,EAAuI,GAAvI,EAA4I,GAA5I,CAA3B,EAA6K,CAAC,GAAGpB,WAAW,CAACJ,OAAhB,EAAyBY,MAAzB,EAAiCL,QAAQ,KAAK,aAA9C,CAA7K,EAA2OM,QAA3O,EAAqPM,KAArP,EAA4PD,OAA5P,EAAqQD,IAArQ,EAA2QF,SAA3Q,EAAsRC,MAAtR,EAA8RF,GAA9R,EAAmSM,YAAnS,CAAP;AACD;;AAED,WAAO,CAAC,GAAGlB,iBAAiB,CAACsB,GAAtB,EAA2B,CAAC,EAAD,CAA3B,CAAP;AACD,GAnBD;AAoBD,CAxBD;;AA0BA,IAAIC,QAAQ,GAAGpB,qBAAf;AACAP,OAAO,CAACE,OAAR,GAAkByB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _getViewportIEGridStyles = _interopRequireDefault(require(\"./getViewportIEGridStyles\"));\n\nvar _getDisplay = _interopRequireDefault(require(\"./getDisplay\"));\n\n/*\n  We need to get gap, rowGap and columnGap recursively because someone can change row or columns\n  in some mediaQuery, so we need to render IE compatible format once again and we need to know to gaps\n  Also we want to render only own gaps into CSS\n */\nvar getViewportGridStyles = function getViewportGridStyles(_ref) {\n  var viewport = _ref.viewport,\n      index = _ref.index,\n      devices = _ref.devices;\n  return function (props) {\n    if (props[viewport]) {\n      var _props$viewport = props[viewport],\n          inline = _props$viewport.inline,\n          maxWidth = _props$viewport.maxWidth,\n          gap = _props$viewport.gap,\n          columnGap = _props$viewport.columnGap,\n          rowGap = _props$viewport.rowGap,\n          rows = _props$viewport.rows,\n          columns = _props$viewport.columns,\n          width = _props$viewport.width;\n      var compatibleIE = (0, _getViewportIEGridStyles.default)(props[viewport], React.Children.count(props.children), {\n        index: index,\n        devices: devices\n      }, props);\n      return (0, _styledComponents.css)([\"\", \";max-width:\", \";width:\", \";grid-template-columns:\", \";grid-template-rows:\", \";grid-column-gap:\", \";grid-row-gap:\", \";grid-gap:\", \";\", \";\"], (0, _getDisplay.default)(inline, viewport === \"smallMobile\"), maxWidth, width, columns, rows, columnGap, rowGap, gap, compatibleIE);\n    }\n\n    return (0, _styledComponents.css)([\"\"]);\n  };\n};\n\nvar _default = getViewportGridStyles;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}