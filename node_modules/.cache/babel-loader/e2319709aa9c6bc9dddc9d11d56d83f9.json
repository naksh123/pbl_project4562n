{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naksh\\\\OneDrive\\\\Desktop\\\\packing-list\\\\src\\\\services\\\\providers\\\\LanguageProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { LANGUAGES } from \"../consts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/React.createContext(null);\n\nconst LanguageProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [selectedLanguage, setSelectedLanguage] = useLocalStorage(\"travel-packing-list:language\", LANGUAGES.ENGLISH);\n  const {\n    i18n\n  } = useTranslation();\n\n  const handleSetLanguage = language => {\n    setSelectedLanguage(language);\n    i18n.changeLanguage(language);\n  };\n\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language: selectedLanguage,\n      setLanguage: handleSetLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LanguageProvider, \"/YrHJ9j0wU/dL3aPRDbNqFS8Zow=\", false, function () {\n  return [useLocalStorage, useTranslation];\n});\n\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n\n  const context = React.useContext(LanguageContext);\n\n  if (!context) {\n    throw new Error(\"useLanguage must be used within the LanguageProvider.\");\n  }\n\n  return context;\n};\n\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport default LanguageProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"sources":["C:/Users/naksh/OneDrive/Desktop/packing-list/src/services/providers/LanguageProvider.js"],"names":["React","useTranslation","useLocalStorage","LANGUAGES","LanguageContext","createContext","LanguageProvider","children","selectedLanguage","setSelectedLanguage","ENGLISH","i18n","handleSetLanguage","language","changeLanguage","setLanguage","useLanguage","context","useContext","Error"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,SAAT,QAA0B,WAA1B;;AAQA,MAAMC,eAAe,gBAAGJ,KAAK,CAACK,aAAN,CAAgD,IAAhD,CAAxB;;AAMA,MAAMC,gBAAgB,GAAG,QAAqD;AAAA;;AAAA,MAApD;AAAEC,IAAAA;AAAF,GAAoD;AAC5E,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CP,eAAe,CAC7D,8BAD6D,EAE7DC,SAAS,CAACO,OAFmD,CAA/D;AAIA,QAAM;AAAEC,IAAAA;AAAF,MAAWV,cAAc,EAA/B;;AAEA,QAAMW,iBAAiB,GAAIC,QAAD,IAAwB;AAChDJ,IAAAA,mBAAmB,CAACI,QAAD,CAAnB;AACAF,IAAAA,IAAI,CAACG,cAAL,CAAoBD,QAApB;AACD,GAHD;;AAKA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,QAAQ,EAAEL,gBADL;AAELO,MAAAA,WAAW,EAAEH;AAFR,KADT;AAAA,cAMGL;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAtBD;;GAAMD,gB;UAC4CJ,e,EAI/BD,c;;;KALbK,gB;AAwBN,OAAO,MAAMU,WAAW,GAAG,MAA2B;AAAA;;AACpD,QAAMC,OAAO,GAAGjB,KAAK,CAACkB,UAAN,CAAiBd,eAAjB,CAAhB;;AAEA,MAAI,CAACa,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,SAAOF,OAAP;AACD,CARM;;IAAMD,W;;AAUb,eAAeV,gBAAf","sourcesContent":["// @flow\r\nimport React from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\nimport useLocalStorage from \"../hooks/useLocalStorage\"\r\nimport { LANGUAGES } from \"../consts\"\r\nimport type { Language } from \"../types\"\r\n\r\ntype LanguageContextType = {|\r\n  language: Language,\r\n  setLanguage: Language => void,\r\n|}\r\n\r\nconst LanguageContext = React.createContext<LanguageContextType | null>(null)\r\n\r\ntype LanguageProviderProps = {|\r\n  children: React$Node,\r\n|}\r\n\r\nconst LanguageProvider = ({ children }: LanguageProviderProps): React$Node => {\r\n  const [selectedLanguage, setSelectedLanguage] = useLocalStorage<Language>(\r\n    \"travel-packing-list:language\",\r\n    LANGUAGES.ENGLISH,\r\n  )\r\n  const { i18n } = useTranslation()\r\n\r\n  const handleSetLanguage = (language: Language) => {\r\n    setSelectedLanguage(language)\r\n    i18n.changeLanguage(language)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{\r\n        language: selectedLanguage,\r\n        setLanguage: handleSetLanguage,\r\n      }}\r\n    >\r\n      {children}\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguage = (): LanguageContextType => {\r\n  const context = React.useContext(LanguageContext)\r\n\r\n  if (!context) {\r\n    throw new Error(\"useLanguage must be used within the LanguageProvider.\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport default LanguageProvider\r\n"]},"metadata":{},"sourceType":"module"}