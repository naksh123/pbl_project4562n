{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar findStyle = function findStyle(node, prop) {\n  if (node instanceof HTMLElement) {\n    return getComputedStyle(node).getPropertyValue(prop);\n  }\n\n  return \"\";\n};\n\nvar isScrollable = function isScrollable(node) {\n  return /(auto|scroll)/.test(findStyle(node, \"overflow\") + findStyle(node, \"overflow-y\") + findStyle(node, \"overflow-x\"));\n}; // getScrollableParent recursively checking for CSS styles which would indicate that element is scrollable.\n// Element can be scrollable when it's parent has overflow auto or scroll set.\n\n\nvar getScrollableParent = function getScrollableParent(node) {\n  if (!node || node === document.body) {\n    return document.body;\n  }\n\n  if (isScrollable(node)) {\n    return node;\n  }\n\n  if (node && node.parentNode) {\n    return getScrollableParent(node.parentNode);\n  }\n\n  return null;\n};\n\nvar _default = getScrollableParent;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/naksh/OneDrive/Desktop/packing-list/node_modules/@kiwicom/orbit-components/lib/Popover/helpers/getScrollableParent.js"],"names":["Object","defineProperty","exports","value","default","findStyle","node","prop","HTMLElement","getComputedStyle","getPropertyValue","isScrollable","test","getScrollableParent","document","body","parentNode","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AAC7C,MAAID,IAAI,YAAYE,WAApB,EAAiC;AAC/B,WAAOC,gBAAgB,CAACH,IAAD,CAAhB,CAAuBI,gBAAvB,CAAwCH,IAAxC,CAAP;AACD;;AAED,SAAO,EAAP;AACD,CAND;;AAQA,IAAII,YAAY,GAAG,SAASA,YAAT,CAAsBL,IAAtB,EAA4B;AAC7C,SAAO,gBAAgBM,IAAhB,CAAqBP,SAAS,CAACC,IAAD,EAAO,UAAP,CAAT,GAA8BD,SAAS,CAACC,IAAD,EAAO,YAAP,CAAvC,GAA8DD,SAAS,CAACC,IAAD,EAAO,YAAP,CAA5F,CAAP;AACD,CAFD,C,CAEG;AACH;;;AAGA,IAAIO,mBAAmB,GAAG,SAASA,mBAAT,CAA6BP,IAA7B,EAAmC;AAC3D,MAAI,CAACA,IAAD,IAASA,IAAI,KAAKQ,QAAQ,CAACC,IAA/B,EAAqC;AACnC,WAAOD,QAAQ,CAACC,IAAhB;AACD;;AAED,MAAIJ,YAAY,CAACL,IAAD,CAAhB,EAAwB;AACtB,WAAOA,IAAP;AACD;;AAED,MAAIA,IAAI,IAAIA,IAAI,CAACU,UAAjB,EAA6B;AAC3B,WAAOH,mBAAmB,CAACP,IAAI,CAACU,UAAN,CAA1B;AACD;;AAED,SAAO,IAAP;AACD,CAdD;;AAgBA,IAAIC,QAAQ,GAAGJ,mBAAf;AACAX,OAAO,CAACE,OAAR,GAAkBa,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar findStyle = function findStyle(node, prop) {\n  if (node instanceof HTMLElement) {\n    return getComputedStyle(node).getPropertyValue(prop);\n  }\n\n  return \"\";\n};\n\nvar isScrollable = function isScrollable(node) {\n  return /(auto|scroll)/.test(findStyle(node, \"overflow\") + findStyle(node, \"overflow-y\") + findStyle(node, \"overflow-x\"));\n}; // getScrollableParent recursively checking for CSS styles which would indicate that element is scrollable.\n// Element can be scrollable when it's parent has overflow auto or scroll set.\n\n\nvar getScrollableParent = function getScrollableParent(node) {\n  if (!node || node === document.body) {\n    return document.body;\n  }\n\n  if (isScrollable(node)) {\n    return node;\n  }\n\n  if (node && node.parentNode) {\n    return getScrollableParent(node.parentNode);\n  }\n\n  return null;\n};\n\nvar _default = getScrollableParent;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}