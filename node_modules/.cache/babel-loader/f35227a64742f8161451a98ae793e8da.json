{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naksh\\\\OneDrive\\\\Desktop\\\\packing-list\\\\src\\\\components\\\\SettingsPopover.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Button from \"@kiwicom/orbit-components/lib/Button\";\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\";\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\";\nimport { CheckCircle, CircleEmpty, Remove, Replace, Settings } from \"@kiwicom/orbit-components/lib/icons\";\nimport Popover from \"@kiwicom/orbit-components/lib/Popover\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SettingsPopover = _ref => {\n  _s();\n\n  let {\n    translatedCategory,\n    toggleSettings,\n    handleShowDelete,\n    handleResetCard,\n    handleDeselectAll,\n    handleSelectAll,\n    isSettingsOpened\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/_jsxDEV(Popover, {\n    content: /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"column\",\n      spacing: \"medium\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        type: \"title4\",\n        as: \"h3\",\n        children: t(\"title.settings_list\", {\n          category: translatedCategory\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), [{\n        tKey: \"button.check_all\",\n        onClick: handleSelectAll,\n        icon: /*#__PURE__*/_jsxDEV(CheckCircle, {\n          ariaHidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, {\n        tKey: \"button.uncheck_all\",\n        onClick: handleDeselectAll,\n        icon: /*#__PURE__*/_jsxDEV(CircleEmpty, {\n          ariaHidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, {\n        tKey: \"button.remove_items\",\n        onClick: handleShowDelete,\n        icon: /*#__PURE__*/_jsxDEV(Remove, {\n          ariaHidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, {\n        tKey: \"button.reset_list\",\n        onClick: handleResetCard,\n        icon: /*#__PURE__*/_jsxDEV(Replace, {\n          ariaHidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this),\n        type: \"criticalSubtle\"\n      }].map(_ref2 => {\n        let {\n          tKey,\n          type = \"secondary\",\n          onClick,\n          icon\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Button, {\n          type: type,\n          iconLeft: icon,\n          size: \"small\",\n          onClick: onClick,\n          fullWidth: true,\n          children: t(tKey)\n        }, tKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this),\n    opened: isSettingsOpened,\n    onOpen: toggleSettings,\n    onClose: toggleSettings,\n    width: \"250px\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      size: \"small\",\n      type: \"secondary\",\n      iconLeft: /*#__PURE__*/_jsxDEV(Settings, {\n        ariaHidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }, this),\n      title: t(\"title.settings_list\", {\n        category: translatedCategory\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsPopover, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = SettingsPopover;\nexport default SettingsPopover;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsPopover\");","map":{"version":3,"sources":["C:/Users/naksh/OneDrive/Desktop/packing-list/src/components/SettingsPopover.js"],"names":["React","useTranslation","Button","Stack","Heading","CheckCircle","CircleEmpty","Remove","Replace","Settings","Popover","SettingsPopover","translatedCategory","toggleSettings","handleShowDelete","handleResetCard","handleDeselectAll","handleSelectAll","isSettingsOpened","t","category","tKey","onClick","icon","type","map"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AACA,OAAOC,OAAP,MAAoB,uCAApB;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,QALF,QAMO,qCANP;AAOA,OAAOC,OAAP,MAAoB,uCAApB;;;AAYA,MAAMC,eAAe,GAAG,QAQC;AAAA;;AAAA,MARA;AACvBC,IAAAA,kBADuB;AAEvBC,IAAAA,cAFuB;AAGvBC,IAAAA,gBAHuB;AAIvBC,IAAAA,eAJuB;AAKvBC,IAAAA,iBALuB;AAMvBC,IAAAA,eANuB;AAOvBC,IAAAA;AAPuB,GAQA;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAQlB,cAAc,EAA5B;AAEA,sBACE,QAAC,OAAD;AACE,IAAA,OAAO,eACL,QAAC,KAAD;AAAO,MAAA,SAAS,EAAC,QAAjB;AAA0B,MAAA,OAAO,EAAC,QAAlC;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAC,QAAd;AAAuB,QAAA,EAAE,EAAC,IAA1B;AAAA,kBACGkB,CAAC,CAAC,qBAAD,EAAwB;AAAEC,UAAAA,QAAQ,EAAER;AAAZ,SAAxB;AADJ;AAAA;AAAA;AAAA;AAAA,cADF,EAIG,CACC;AACES,QAAAA,IAAI,EAAE,kBADR;AAEEC,QAAAA,OAAO,EAAEL,eAFX;AAGEM,QAAAA,IAAI,eAAE,QAAC,WAAD;AAAa,UAAA,UAAU;AAAvB;AAAA;AAAA;AAAA;AAAA;AAHR,OADD,EAMC;AACEF,QAAAA,IAAI,EAAE,oBADR;AAEEC,QAAAA,OAAO,EAAEN,iBAFX;AAGEO,QAAAA,IAAI,eAAE,QAAC,WAAD;AAAa,UAAA,UAAU;AAAvB;AAAA;AAAA;AAAA;AAAA;AAHR,OAND,EAWC;AACEF,QAAAA,IAAI,EAAE,qBADR;AAEEC,QAAAA,OAAO,EAAER,gBAFX;AAGES,QAAAA,IAAI,eAAE,QAAC,MAAD;AAAQ,UAAA,UAAU;AAAlB;AAAA;AAAA;AAAA;AAAA;AAHR,OAXD,EAgBC;AACEF,QAAAA,IAAI,EAAE,mBADR;AAEEC,QAAAA,OAAO,EAAEP,eAFX;AAGEQ,QAAAA,IAAI,eAAE,QAAC,OAAD;AAAS,UAAA,UAAU;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAHR;AAIEC,QAAAA,IAAI,EAAE;AAJR,OAhBD,EAsBCC,GAtBD,CAsBK;AAAA,YAAC;AAAEJ,UAAAA,IAAF;AAAQG,UAAAA,IAAI,GAAG,WAAf;AAA4BF,UAAAA,OAA5B;AAAqCC,UAAAA;AAArC,SAAD;AAAA,4BACJ,QAAC,MAAD;AAAmB,UAAA,IAAI,EAAEC,IAAzB;AAA+B,UAAA,QAAQ,EAAED,IAAzC;AAA+C,UAAA,IAAI,EAAC,OAApD;AAA4D,UAAA,OAAO,EAAED,OAArE;AAA8E,UAAA,SAAS,MAAvF;AAAA,oBACGH,CAAC,CAACE,IAAD;AADJ,WAAaA,IAAb;AAAA;AAAA;AAAA;AAAA,gBADI;AAAA,OAtBL,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAmCE,IAAA,MAAM,EAAEH,gBAnCV;AAoCE,IAAA,MAAM,EAAEL,cApCV;AAqCE,IAAA,OAAO,EAAEA,cArCX;AAsCE,IAAA,KAAK,EAAC,OAtCR;AAAA,2BAwCE,QAAC,MAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,WAFP;AAGE,MAAA,QAAQ,eAAE,QAAC,QAAD;AAAU,QAAA,UAAU;AAApB;AAAA;AAAA;AAAA;AAAA,cAHZ;AAIE,MAAA,KAAK,EAAEM,CAAC,CAAC,qBAAD,EAAwB;AAAEC,QAAAA,QAAQ,EAAER;AAAZ,OAAxB;AAJV;AAAA;AAAA;AAAA;AAAA;AAxCF;AAAA;AAAA;AAAA;AAAA,UADF;AAiDD,CA5DD;;GAAMD,e;UASUV,c;;;KATVU,e;AA8DN,eAAeA,eAAf","sourcesContent":["// @flow\r\nimport React from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Button from \"@kiwicom/orbit-components/lib/Button\"\r\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\r\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\r\nimport {\r\n  CheckCircle,\r\n  CircleEmpty,\r\n  Remove,\r\n  Replace,\r\n  Settings,\r\n} from \"@kiwicom/orbit-components/lib/icons\"\r\nimport Popover from \"@kiwicom/orbit-components/lib/Popover\"\r\n\r\ntype Props = {|\r\n  translatedCategory: string,\r\n  toggleSettings: () => void,\r\n  handleShowDelete: () => void,\r\n  handleResetCard: () => void,\r\n  handleDeselectAll: () => void,\r\n  handleSelectAll: () => void,\r\n  isSettingsOpened: boolean,\r\n|}\r\n\r\nconst SettingsPopover = ({\r\n  translatedCategory,\r\n  toggleSettings,\r\n  handleShowDelete,\r\n  handleResetCard,\r\n  handleDeselectAll,\r\n  handleSelectAll,\r\n  isSettingsOpened,\r\n}: Props): React$Node => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Popover\r\n      content={\r\n        <Stack direction=\"column\" spacing=\"medium\">\r\n          <Heading type=\"title4\" as=\"h3\">\r\n            {t(\"title.settings_list\", { category: translatedCategory })}\r\n          </Heading>\r\n          {[\r\n            {\r\n              tKey: \"button.check_all\",\r\n              onClick: handleSelectAll,\r\n              icon: <CheckCircle ariaHidden />,\r\n            },\r\n            {\r\n              tKey: \"button.uncheck_all\",\r\n              onClick: handleDeselectAll,\r\n              icon: <CircleEmpty ariaHidden />,\r\n            },\r\n            {\r\n              tKey: \"button.remove_items\",\r\n              onClick: handleShowDelete,\r\n              icon: <Remove ariaHidden />,\r\n            },\r\n            {\r\n              tKey: \"button.reset_list\",\r\n              onClick: handleResetCard,\r\n              icon: <Replace ariaHidden />,\r\n              type: \"criticalSubtle\",\r\n            },\r\n          ].map(({ tKey, type = \"secondary\", onClick, icon }) => (\r\n            <Button key={tKey} type={type} iconLeft={icon} size=\"small\" onClick={onClick} fullWidth>\r\n              {t(tKey)}\r\n            </Button>\r\n          ))}\r\n        </Stack>\r\n      }\r\n      opened={isSettingsOpened}\r\n      onOpen={toggleSettings}\r\n      onClose={toggleSettings}\r\n      width=\"250px\"\r\n    >\r\n      <Button\r\n        size=\"small\"\r\n        type=\"secondary\"\r\n        iconLeft={<Settings ariaHidden />}\r\n        title={t(\"title.settings_list\", { category: translatedCategory })}\r\n      />\r\n    </Popover>\r\n  )\r\n}\r\n\r\nexport default SettingsPopover\r\n"]},"metadata":{},"sourceType":"module"}