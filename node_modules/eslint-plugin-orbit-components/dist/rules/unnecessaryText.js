"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _isOrbitComponent = _interopRequireDefault(require("../utils/isOrbitComponent"));

var _detectOriginalOrbitName = _interopRequireDefault(require("../utils/detectOriginalOrbitName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  create: context => {
    const importedOrbitComponents = {};
    const JSXElements = [];
    const doNotUseTextIn = ["Button", "Heading"];

    const registerImport = (ctx, node, name) => {
      if ((0, _isOrbitComponent.default)(name)) {
        const ORIGINAL_ORBIT_NAME = (0, _detectOriginalOrbitName.default)(node);
        const LOCAL_NAME = node.specifiers[0].local.name;

        if (ORIGINAL_ORBIT_NAME) {
          importedOrbitComponents[LOCAL_NAME] = ORIGINAL_ORBIT_NAME;
        }
      }
    };

    return {
      JSXElement(node) {
        JSXElements.push(node);
      },

      ImportDeclaration: node => {
        if (node.specifiers.length) {
          const name = node.source.value;
          registerImport(context, node, name);
        }
      },
      "Program:exit": () => {
        JSXElements.forEach(node => {
          if (t.isJSXIdentifier(node.openingElement.name)) {
            const localName = node.openingElement.name.name;

            if (localName in importedOrbitComponents && doNotUseTextIn.find(x => x === importedOrbitComponents[localName]) && node.children) {
              node.children.forEach(child => {
                if (t.isJSXElement(child)) {
                  if (!child.openingElement) return;

                  if (t.isJSXIdentifier(child.openingElement.name)) {
                    const childElementName = child.openingElement.name.name;

                    if (importedOrbitComponents[childElementName] === "Text") {
                      context.report({
                        // @ts-expect-error TODO
                        node: child,
                        message: "Don't wrap ".concat(localName, "'s children to Text component. ") + "This wrapping in unnecessary and breaks visual style of ".concat(localName, "'s typography.")
                      });
                    }
                  }
                }
              });
            }
          }
        });
      }
    };
  }
};
exports.default = _default;