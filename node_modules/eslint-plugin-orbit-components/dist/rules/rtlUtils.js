"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SpacingError = exports.RightOrLeftError = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const RightOrLeftError = "Do not use theme.rtl as the test value of conditional expression. Consider importing either left or right function from @kiwicom/orbit-components. See more on https://orbit.kiwi/utilities/right-to-left-languages/.";
exports.RightOrLeftError = RightOrLeftError;
const SpacingError = "Do not use theme.rtl as the test value of conditional expression. Consider importing rtlSpacing function from @kiwicom/orbit-components. See more on https://orbit.kiwi/utilities/right-to-left-languages/.";
exports.SpacingError = SpacingError;
const rtlUtils = {
  meta: {
    type: "problem",
    docs: {
      description: "Prevents bad RTL patterns",
      category: "Possible Errors",
      recommended: true
    }
  },
  // @ts-expect-error TODO
  create: context => {
    let specifier = "";
    return {
      ImportDeclaration(node) {
        if (node.source.value === "styled-components") {
          const def = node.specifiers.filter(s => t.isImportDefaultSpecifier(s));
          specifier = def[0].local.name;
        }
      },

      TaggedTemplateExpression(node) {
        if (t.isMemberExpression(node.tag)) {
          if (t.isIdentifier(node.tag.object) && node.tag.object.name === specifier) {
            if (t.isTemplateLiteral(node.quasi)) {
              node.quasi.expressions.forEach(e => {
                if (t.isArrowFunctionExpression(e)) {
                  if (t.isConditionalExpression(e.body)) {
                    if (t.isMemberExpression(e.body.test) && t.isIdentifier(e.body.test.property)) {
                      if (e.body.test.property.name === "rtl") {
                        const {
                          consequent
                        } = e.body; // if it's literal value of which matches patterns
                        // @ts-expect-error babel-types

                        if (t.isLiteral(consequent) && consequent.value) {
                          const regexWithProp = new RegExp(/left|right|margin-left|margin-right|padding-left|padding-right/g); // @ts-expect-error babel-types

                          if (consequent.value.match(regexWithProp)) {
                            context.report({
                              // @ts-expect-error TODO
                              node: consequent,
                              message: RightOrLeftError
                            });
                          } else {
                            context.report({
                              // @ts-expect-error TODO
                              node: consequent,
                              message: SpacingError
                            });
                          }
                        }

                        if (t.isTemplateLiteral(consequent)) {
                          context.report({
                            // @ts-expect-error TODO
                            node: consequent,
                            message: SpacingError
                          });
                        }
                      }
                    }
                  }
                }
              });
            }
          }
        }
      }

    };
  }
};
var _default = rtlUtils;
exports.default = _default;