"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ERRORS = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ERRORS = {
  variableDeclaration: "Do not use defaultTheme as value, use useTheme() hook or ThemeConsumer",
  styled: "Do not use defaultTheme directly inside styled components, either create defaultProps or consume the theme from with arrow function expression.",
  import: "Do not name defaultTheme import as theme, please rename it to defaultTheme/themeDefault",
  destructured: "Do not destructured defaultTheme, use useTheme() hook or ThemeConsumer"
};
exports.ERRORS = ERRORS;
const defaultThemeRule = {
  meta: {
    type: "problem",
    docs: {
      description: "Rule helps to avoid bad patterns of defaultTheme usage",
      category: "Possible errors",
      recommended: true
    }
  },
  // @ts-expect-error todo
  create: context => {
    let specifier = "";
    return {
      ImportDeclaration(node) {
        if (node.source.value === "@kiwicom/orbit-components/lib/defaultTheme") {
          node.specifiers.forEach(s => {
            if (t.isImportDefaultSpecifier(s)) {
              if (s.local.name === "theme") {
                context.report({
                  // @ts-expect-error TODO
                  node,
                  message: ERRORS.import
                });
              } else if (t.isImportDefaultSpecifier(s)) {
                specifier = s.local.name;
              }
            }
          });
        }
      },

      /**
       * Prevents:
          const kek = {
            activeColor: "red",
            theme: defaultTheme.orbit.paletteBlueNormal,
          }
      */
      VariableDeclaration(node) {
        node.declarations.forEach(n => {
          if (t.isVariableDeclarator(n)) {
            if (t.isObjectExpression(n.init)) {
              n.init.properties.forEach(p => {
                if (t.isProperty(p)) {
                  if (t.isMemberExpression(p.value)) {
                    if (t.isMemberExpression(p.value.object) && t.isIdentifier(p.value.object.object)) {
                      if (specifier === p.value.object.object.name) {
                        context.report({
                          // @ts-expect-error TODO
                          node: p,
                          message: ERRORS.variableDeclaration
                        });
                      }
                    }
                  }
                }
              });
            }
            /**
              Prevents destructure of defaultTheme:
                const {
                  borderWidthCard,
                  borderStyleCard,
                  borderColorCard,
                  borderRadiusNormal,
                  spaceMedium,
                } = defaultTheme.orbit;
             */


            if (t.isMemberExpression(n.init) && t.isObjectPattern(n.id)) {
              if (t.isIdentifier(n.init.object)) {
                if (specifier === n.init.object.name) {
                  context.report({
                    // @ts-expect-error TODO
                    node,
                    message: ERRORS.destructured
                  });
                }
              }
            }
          }
        });
      },

      /**
       * Prevents defaultTheme as literal inside styled component:
          const Wrapper = styled.div`
            background: ${defaultTheme.orbit.paletteWhite};
          `
       */
      TemplateLiteral(node) {
        node.expressions.forEach(exp => {
          if (t.isMemberExpression(exp)) {
            if (t.isMemberExpression(exp.object) && t.isIdentifier(exp.object.object)) {
              if (specifier === exp.object.object.name) {
                context.report({
                  // @ts-expect-error TODO
                  node: exp,
                  message: ERRORS.styled
                });
              }
            }
          }
        });
      }

    };
  }
};
var _default = defaultThemeRule;
exports.default = _default;