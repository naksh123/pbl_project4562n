"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ERROR = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const LIMIT = 1;
const ERROR = "Using many arrow function expressions in a single styled component can negatively impact performance. Consider using one single function to destructure all props and return one single css helper function if possible.";
exports.ERROR = ERROR;
const preferSingleDestructure = {
  meta: {
    type: "suggestion",
    docs: {
      description: "Using too many arrow functions in interpolations can have a negative impact on performance, because they have to be evaluated with execution context. This is done internally by wrapping all functions into css helper from styled-components . In most cases it's far more better to use one single arrow function and then use nested conditions that returns css if necessary.",
      category: "Possible Errors",
      recommended: true
    }
  },
  // @ts-expect-error TODO
  create: context => {
    let specifier = "";
    return {
      ImportDeclaration(node) {
        if (node.source.value === "styled-components") {
          const def = node.specifiers.filter(s => t.isImportDefaultSpecifier(s));

          if (def.length > 0) {
            specifier = def[0].local.name;
          }
        }
      },

      TaggedTemplateExpression(node) {
        if (t.isMemberExpression(node.tag)) {
          if (t.isIdentifier(node.tag.object) && node.tag.object.name === specifier) {
            if (t.isTemplateLiteral(node.quasi)) {
              const count = node.quasi.expressions.filter(e => t.isArrowFunctionExpression(e)).length;

              if (count > LIMIT) {
                context.report({
                  // @ts-expect-error TODO
                  node,
                  message: ERROR
                });
              }
            }
          }
        }
      }

    };
  }
};
var _default = preferSingleDestructure;
exports.default = _default;