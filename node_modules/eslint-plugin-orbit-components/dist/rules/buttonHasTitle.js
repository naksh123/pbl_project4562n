"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _isOrbitComponent = _interopRequireDefault(require("../utils/isOrbitComponent"));

var _detectOriginalOrbitName = _interopRequireDefault(require("../utils/detectOriginalOrbitName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  create: context => {
    const importedOrbitComponents = {};
    const JSXElements = [];
    const variables = {};
    const Buttons = ["Button", "ButtonLink"];

    const registerImport = (ctx, node, name) => {
      if ((0, _isOrbitComponent.default)(name)) {
        const ORIGINAL_ORBIT_NAME = (0, _detectOriginalOrbitName.default)(node);
        const LOCAL_NAME = node.specifiers[0].local.name;
        importedOrbitComponents[LOCAL_NAME] = ORIGINAL_ORBIT_NAME;
      }
    };

    return {
      JSXElement(node) {
        JSXElements.push(node);
      },

      VariableDeclaration(node) {
        node.declarations.forEach(declaration => {
          if (t.isObjectExpression(declaration.init)) {
            if (declaration.init.properties.length > 0) {
              if (t.isIdentifier(declaration.id)) {
                variables[declaration.id.name] = declaration.init.properties.map(property => {
                  if (t.isProperty(property) && t.isIdentifier(property.key)) {
                    return property.key.name;
                  }

                  return null;
                });
              }
            }
          }
        });
      },

      ImportDeclaration: node => {
        if (node.specifiers.length) {
          const name = node.source.value;
          registerImport(context, node, name);
        }
      },
      "Program:exit": () => {
        JSXElements.forEach(node => {
          if (t.isJSXIdentifier(node.openingElement.name)) {
            const localName = node.openingElement.name.name;

            if (localName in importedOrbitComponents && Buttons.find(x => x === importedOrbitComponents[localName])) {
              /*
              We can safely return, because the JSXElement is not selfClosing - does have children.
              e.g. <Button>children</Button>
              */
              if (!node.openingElement.selfClosing) return;
              /*
              It's to possible to use rest spread to attach properties to components.
              Therefore, we need to check if `title` property is in the spreading object.
              */

              const spread = node.openingElement.attributes.filter(n => n.type === "JSXSpreadAttribute") || [];

              if (spread.length > 0) {
                /*
                The object can be imported from different file/module,
                therefore we skip empty object variable declarations
                */
                if (Object.keys(variables).length === 0) return;
                spread.forEach(s => {
                  if (t.isJSXSpreadAttribute(s) && t.isIdentifier(s.argument)) {
                    const {
                      name
                    } = s.argument;
                    /*
                    If the spreading variable name is in object declarations, we can check if "title"
                    is present, or report warning.
                    */

                    if (!(name in variables)) return;
                    if (variables[name].find(v => v === "title")) return;
                    context.report({
                      // @ts-expect-error TODO
                      node,
                      message: "".concat(localName, " doesn't have children. Please provide title property to add aria-label, so it's accessible for screen readers.")
                    });
                  }
                });
                /*
                Last check for JSX attributes, if "title" is present
                */
              } else if (!node.openingElement.attributes.find(n => n.type === "JSXAttribute" && n.name.name === "title")) {
                context.report({
                  // @ts-expect-error TODO
                  node,
                  message: "".concat(localName, " doesn't have children. Please provide title property to add aria-label, so it's accessible for screen readers.")
                });
              }
            }
          }
        });
      }
    };
  }
};
exports.default = _default;