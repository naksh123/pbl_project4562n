"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const uniqueId = {
  meta: {
    type: "problem",
    docs: {
      description: "Prevents id namespace collisions",
      category: "Possible Errors",
      recommended: true
    }
  },
  // @ts-expect-error node
  create: context => {
    return {
      JSXAttribute(node) {
        if (node.value) {
          if (node.name.name === "id" && !t.isJSXExpressionContainer(node.value)) {
            context.report({
              // @ts-expect-error node
              node,
              // @ts-expect-error node
              message: "".concat(node.name.name, "=\"").concat(node.value.value, "\", do not use literal value as ID, you should use randomID utility function")
            });
          }
        }
      }

    };
  }
};
var _default = uniqueId;
exports.default = _default;