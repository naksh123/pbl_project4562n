import * as React from "react";
import { SIZE_OPTIONS } from "./consts";
import TooltipPrimitive from "../primitives/TooltipPrimitive";
import useMediaQuery from "../hooks/useMediaQuery";
import MobileDialog from "../primitives/MobileDialogPrimitive";

var Tooltip = function Tooltip(_ref) {
  var children = _ref.children,
      _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? true : _ref$enabled,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? "0" : _ref$tabIndex,
      dataTest = _ref.dataTest,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? SIZE_OPTIONS.SMALL : _ref$size,
      content = _ref.content,
      preferredPosition = _ref.preferredPosition,
      _ref$renderInPortal = _ref.renderInPortal,
      renderInPortal = _ref$renderInPortal === void 0 ? true : _ref$renderInPortal,
      preferredAlign = _ref.preferredAlign,
      _ref$stopPropagation = _ref.stopPropagation,
      stopPropagation = _ref$stopPropagation === void 0 ? false : _ref$stopPropagation,
      removeUnderlinedText = _ref.removeUnderlinedText,
      _ref$block = _ref.block,
      block = _ref$block === void 0 ? false : _ref$block;

  var _useMediaQuery = useMediaQuery(),
      isLargeMobile = _useMediaQuery.isLargeMobile;

  return isLargeMobile ? /*#__PURE__*/React.createElement(TooltipPrimitive, {
    dataTest: dataTest,
    tabIndex: tabIndex,
    enabled: enabled,
    content: content,
    size: size,
    renderInPortal: renderInPortal,
    preferredPosition: preferredPosition,
    preferredAlign: preferredAlign,
    stopPropagation: stopPropagation,
    removeUnderlinedText: removeUnderlinedText,
    block: block
  }, children) : /*#__PURE__*/React.createElement(MobileDialog, {
    dataTest: dataTest,
    tabIndex: tabIndex,
    enabled: enabled,
    content: content,
    removeUnderlinedText: removeUnderlinedText,
    stopPropagation: stopPropagation,
    block: block
  }, children);
};

export default Tooltip;