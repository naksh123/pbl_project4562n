import * as React from "react";
import styled, { css } from "styled-components";
import defaultTheme from "../../../defaultTheme";
import Heading from "../../../Heading";
import Stack from "../../../Stack";
import NewWindow from "../../../icons/NewWindow";
import ChevronRight from "../../../icons/ChevronRight";
import ChevronDown from "../../../icons/ChevronDown";
import { rtlSpacing } from "../../../utils/rtl";
var StyledTileHeader = styled.div.withConfig({
  displayName: "TileHeader__StyledTileHeader",
  componentId: "sc-1pgozle-0"
})(["display:block;cursor:pointer;position:relative;padding:", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.orbit.spaceMedium;
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledTileHeader.defaultProps = {
  theme: defaultTheme
};
var StyledTileTitle = styled.div.withConfig({
  displayName: "TileHeader__StyledTileTitle",
  componentId: "sc-1pgozle-1"
})(["display:flex;align-items:center;width:100%;"]); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledTileTitle.defaultProps = {
  theme: defaultTheme
};
var StyledTileIcon = styled.div.withConfig({
  displayName: "TileHeader__StyledTileIcon",
  componentId: "sc-1pgozle-2"
})(["color:", ";display:flex;flex-shrink:0;align-items:center;align-self:flex-start;margin:", ";"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.orbit.colorHeading;
}, function (_ref3) {
  var theme = _ref3.theme;
  return rtlSpacing("0 ".concat(theme.orbit.spaceXSmall, " 0 0"));
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledTileIcon.defaultProps = {
  theme: defaultTheme
};
var StyledTileDescription = styled.div.withConfig({
  displayName: "TileHeader__StyledTileDescription",
  componentId: "sc-1pgozle-3"
})(["font-family:", ";font-size:", ";color:", ";line-height:", ";width:100%;", ";"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.orbit.fontFamily;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.orbit.fontSizeTextNormal;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.orbit.colorTextPrimary;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.orbit.lineHeightTextNormal;
}, function (_ref8) {
  var hasTitle = _ref8.hasTitle,
      theme = _ref8.theme;
  return hasTitle && css(["margin-top:", ";"], theme.orbit.spaceXXSmall);
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledTileDescription.defaultProps = {
  theme: defaultTheme
};
export var StyledIconRight = styled.div.withConfig({
  displayName: "TileHeader__StyledIconRight",
  componentId: "sc-1pgozle-4"
})(["color:", ";padding:", ";transition:color ", " ease-in-out;svg{", ";transition:transform ", " ease-in-out;}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.orbit.paletteInkLight;
}, function (_ref10) {
  var theme = _ref10.theme;
  return rtlSpacing("0 0 0 ".concat(theme.orbit.spaceMedium));
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.orbit.durationFast;
}, function (_ref12) {
  var isExpanded = _ref12.isExpanded;
  return isExpanded && css(["transform:rotate(-180deg);"]);
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.orbit.durationFast;
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledIconRight.defaultProps = {
  theme: defaultTheme
};

var getIconRight = function getIconRight(_ref14) {
  var external = _ref14.external,
      isExpandable = _ref14.isExpandable;

  if (isExpandable) {
    return /*#__PURE__*/React.createElement(ChevronDown, {
      size: "medium"
    });
  }

  if (external) {
    return /*#__PURE__*/React.createElement(NewWindow, {
      size: "medium"
    });
  }

  return /*#__PURE__*/React.createElement(ChevronRight, {
    size: "medium",
    reverseOnRtl: true
  });
};

var IconRight = function IconRight(_ref15) {
  var external = _ref15.external,
      isExpandable = _ref15.isExpandable,
      isExpanded = _ref15.isExpanded;
  return /*#__PURE__*/React.createElement(StyledIconRight, {
    isExpandable: isExpandable,
    isExpanded: isExpanded
  }, getIconRight({
    external: external,
    isExpandable: isExpandable
  }));
};

var TileHeader = function TileHeader(_ref16) {
  var icon = _ref16.icon,
      title = _ref16.title,
      description = _ref16.description,
      external = _ref16.external,
      onClick = _ref16.onClick,
      isExpandable = _ref16.isExpandable,
      isExpanded = _ref16.isExpanded;
  return /*#__PURE__*/React.createElement(StyledTileHeader, {
    onClick: onClick
  }, /*#__PURE__*/React.createElement(Stack, {
    align: "center",
    shrink: true,
    spacing: "none"
  }, icon && /*#__PURE__*/React.createElement(StyledTileIcon, null, icon), /*#__PURE__*/React.createElement(Stack, {
    spacing: "none",
    direction: "column",
    shrink: true
  }, title && /*#__PURE__*/React.createElement(StyledTileTitle, null, /*#__PURE__*/React.createElement(Heading, {
    type: "title3",
    as: "h3"
  }, title)), description && /*#__PURE__*/React.createElement(StyledTileDescription, {
    hasTitle: !!title
  }, description)), /*#__PURE__*/React.createElement(IconRight, {
    external: external,
    isExpandable: isExpandable,
    isExpanded: isExpanded
  })));
};

export default TileHeader;