import * as React from "react";
import styled from "styled-components";
import defaultTheme from "../defaultTheme";
import Button from "../Button";
import ChevronLeft from "../icons/ChevronLeft";
import getSpacingToken from "../common/getSpacingToken";
import useTranslate from "../hooks/useTranslate";
import { right } from "../utils/rtl";
import TextLink from "../TextLink";
import Hide from "../Hide";
var StyledBreadcrumbs = styled.nav.withConfig({
  displayName: "Breadcrumbs__StyledBreadcrumbs",
  componentId: "sc-1zqkwq-0"
})(["font-family:", ";font-size:", ";margin-bottom:", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.orbit.fontFamily;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.orbit.fontSizeTextSmall;
}, getSpacingToken); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledBreadcrumbs.defaultProps = {
  theme: defaultTheme
};
var StyledBreadcrumbsList = styled.ol.withConfig({
  displayName: "Breadcrumbs__StyledBreadcrumbsList",
  componentId: "sc-1zqkwq-1"
})(["display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0;"]);
var StyledBackButtonWrapper = styled.span.withConfig({
  displayName: "Breadcrumbs__StyledBackButtonWrapper",
  componentId: "sc-1zqkwq-2"
})(["margin-", ":", ";"], right, function (_ref3) {
  var theme = _ref3.theme;
  return theme.orbit.spaceSmall;
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledBackButtonWrapper.defaultProps = {
  theme: defaultTheme
};

var GoBackButton = function GoBackButton(_ref4) {
  var onClick = _ref4.onClick,
      backHref = _ref4.backHref;
  var translate = useTranslate();
  return /*#__PURE__*/React.createElement(StyledBackButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
    iconLeft: /*#__PURE__*/React.createElement(ChevronLeft, {
      reverseOnRtl: true
    }),
    circled: true,
    type: "secondary",
    size: "small",
    onClick: onClick,
    href: backHref,
    title: translate("breadcrumbs_back")
  }));
};

var Breadcrumbs = function Breadcrumbs(props) {
  var translate = useTranslate();
  var children = props.children,
      dataTest = props.dataTest,
      onGoBack = props.onGoBack,
      _props$goBackTitle = props.goBackTitle,
      goBackTitle = _props$goBackTitle === void 0 ? translate("breadcrumbs_back") : _props$goBackTitle,
      spaceAfter = props.spaceAfter,
      backHref = props.backHref;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Hide, {
    on: ["smallMobile", "mediumMobile"]
  }, /*#__PURE__*/React.createElement(StyledBreadcrumbs, {
    "aria-label": "Breadcrumb",
    "data-test": dataTest,
    spaceAfter: spaceAfter
  }, /*#__PURE__*/React.createElement(StyledBreadcrumbsList, {
    itemScope: true,
    itemType: "http://schema.org/BreadcrumbList"
  }, onGoBack || backHref ? /*#__PURE__*/React.createElement(GoBackButton, {
    backHref: backHref,
    onClick: onGoBack
  }) : null, React.Children.map(children, function (item, key) {
    if ( /*#__PURE__*/React.isValidElement(item)) {
      return /*#__PURE__*/React.cloneElement(item, {
        active: key === React.Children.count(children) - 1,
        contentKey: key + 1
      });
    }

    return null;
  })))), /*#__PURE__*/React.createElement(Hide, {
    on: ["largeMobile", "tablet", "desktop", "largeDesktop"]
  }, onGoBack || backHref ? /*#__PURE__*/React.createElement(TextLink, {
    standAlone: true,
    iconLeft: /*#__PURE__*/React.createElement(ChevronLeft, {
      reverseOnRtl: true
    }),
    dataTest: "BreadcrumbsBack",
    onClick: onGoBack,
    href: backHref
  }, goBackTitle) : null));
};

export default Breadcrumbs;
export { default as BreadcrumbsItem } from "./BreadcrumbsItem";