import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useEffect, useState } from "react";
import boundingClientRect from "../../../utils/boundingClientRect/index";

var useDimensions = function useDimensions(_ref, children, parent) {
  var containerRef = _ref.containerRef,
      tooltip = _ref.tooltip,
      content = _ref.content;

  var _useState = useState({
    containerTop: 0,
    containerTopPure: 0,
    containerLeft: 0,
    containerLeftPure: 0,
    containerHeight: 0,
    containerWidth: 0,
    tooltipWidth: 0,
    tooltipHeight: 0,
    windowWidth: 0,
    windowHeight: 0,
    contentHeight: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      dimensions = _useState2[0],
      setDimensions = _useState2[1];

  useEffect(function () {
    var calculateDimensions = function calculateDimensions() {
      var containerDimensions = boundingClientRect(containerRef);
      var tooltipDimensions = boundingClientRect(tooltip);
      var contentDimensions = boundingClientRect(content);

      if (containerDimensions && tooltipDimensions && contentDimensions && typeof window !== "undefined") {
        setDimensions({
          containerTop: containerDimensions.top,
          containerTopPure: containerDimensions.top - (window.scrollY || window.pageYOffset),
          containerLeft: containerDimensions.left,
          containerLeftPure: containerDimensions.left - (window.scrollX || window.pageXOffset),
          containerHeight: containerDimensions.height,
          containerWidth: containerDimensions.width,
          tooltipWidth: tooltipDimensions.width,
          tooltipHeight: tooltipDimensions.height,
          windowWidth: window.innerWidth,
          windowHeight: window.innerHeight,
          contentHeight: contentDimensions.height
        });
      }
    };

    calculateDimensions();
    window.addEventListener("resize", calculateDimensions);
    window.addEventListener("scroll", calculateDimensions);
    return function () {
      window.removeEventListener("resize", calculateDimensions);
      window.removeEventListener("scroll", calculateDimensions);
    };
  }, [containerRef, content, tooltip, children, parent]);
  return dimensions;
};

export default useDimensions;