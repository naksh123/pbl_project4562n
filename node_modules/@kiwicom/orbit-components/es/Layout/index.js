import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import * as React from "react";
import styled, { css } from "styled-components";
import defaultTheme from "../defaultTheme";
import Grid from "../utils/Grid";
import { LAYOUT_SETTINGS } from "./consts";
import mq from "../utils/mediaQuery";

var getChildrenProps = function getChildrenProps(type, key) {
  if (LAYOUT_SETTINGS[type].layoutColumns && LAYOUT_SETTINGS[type].layoutColumns[key]) {
    return LAYOUT_SETTINGS[type].layoutColumns[key];
  }

  return null;
};

var StyledLayout = styled(Grid).withConfig({
  displayName: "Layout__StyledLayout",
  componentId: "vx9wse-0"
})(["box-sizing:border-box;margin:0 auto;width:100%;padding:0 ", ";", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.orbit.spaceMedium;
}, mq.desktop(css(["padding:", ";"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.orbit.spaceLarge;
}))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledLayout.defaultProps = {
  theme: defaultTheme
};

var Layout = function Layout(_ref3) {
  var children = _ref3.children,
      type = _ref3.type,
      dataTest = _ref3.dataTest;
  return /*#__PURE__*/React.createElement(StyledLayout, _extends({}, LAYOUT_SETTINGS[type], {
    dataTest: dataTest
  }), React.Children.map(children, function (item, key) {
    return /*#__PURE__*/React.cloneElement(item, _objectSpread(_objectSpread({}, getChildrenProps(type, key)), item.props));
  }));
};

export default Layout;
export { default as LayoutColumn } from "./LayoutColumn";