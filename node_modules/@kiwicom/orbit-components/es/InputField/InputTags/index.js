import * as React from "react";
import styled from "styled-components";
import { rtlSpacing } from "../../utils/rtl";
import defaultTheme from "../../defaultTheme";
import { StyledTag } from "../../Tag";
var StyledInputTags = styled.div.withConfig({
  displayName: "InputTags__StyledInputTags",
  componentId: "sc-92v3p1-0"
})(["position:relative;margin:", ";display:flex;align-items:center;flex:0 1 auto;height:100%;z-index:2;min-width:50px;overflow:hidden;"], function (_ref) {
  var theme = _ref.theme;
  return rtlSpacing("0 0 0 ".concat(theme.orbit.spaceSmall));
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledInputTags.defaultProps = {
  theme: defaultTheme
};
var StyledInputTagsInner = styled.div.withConfig({
  displayName: "InputTags__StyledInputTagsInner",
  componentId: "sc-92v3p1-1"
})(["overflow-x:scroll;white-space:nowrap;-ms-overflow-style:none;scrollbar-width:none;display:flex;align-items:center;&::-webkit-scrollbar{display:none;}", " + ", "{margin:", ";}"], StyledTag, StyledTag, function (_ref2) {
  var theme = _ref2.theme;
  return rtlSpacing("0 0 0 ".concat(theme.orbit.spaceXSmall));
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledInputTagsInner.defaultProps = {
  theme: defaultTheme
};

var InputTags = function InputTags(_ref3) {
  var children = _ref3.children;
  var tagsRef = /*#__PURE__*/React.createRef();
  React.useEffect(function () {
    var handleMouseMove = function handleMouseMove(event) {
      if (tagsRef && tagsRef.current) {
        var isDragging = tagsRef.current.isDragging;

        if (isDragging && event.movementX) {
          tagsRef.current.scrollLeft -= event.movementX;
        }
      }
    };

    var handleMouseUp = function handleMouseUp() {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = false;
      }
    };

    var tags = tagsRef.current;

    if (tags) {
      tags.addEventListener("mousemove", handleMouseMove);
      tags.addEventListener("mouseup", handleMouseUp);
    }

    return function () {
      if (tags) {
        tags.removeEventListener("mousemove", handleMouseMove);
        tags.removeEventListener("mouseup", handleMouseUp);
      }
    };
  }, [tagsRef]);
  return /*#__PURE__*/React.createElement(StyledInputTags, null, /*#__PURE__*/React.createElement(StyledInputTagsInner, {
    ref: tagsRef,
    onMouseDown: function onMouseDown() {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = true;
      }
    }
  }, children));
};

export default InputTags;