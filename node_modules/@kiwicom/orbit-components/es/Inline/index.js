import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from "react";
import styled, { css } from "styled-components";
import defaultTheme from "../defaultTheme";
import { DEVICES as DEVICES_CONSTS } from "../utils/mediaQuery/consts";
import media from "../utils/mediaQuery";
import { normalize } from "./helpers";
var StyledInlineInner = styled.div.withConfig({
  displayName: "Inline__StyledInlineInner",
  componentId: "sc-1ygdv81-0"
})(["display:flex;flex-direction:row;flex-wrap:wrap;", ""], function (_ref) {
  var viewportSizes = _ref.viewportSizes;
  return Object.entries(viewportSizes).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        query = _ref3[0],
        value = _ref3[1];

    if (query !== DEVICES_CONSTS[0] && typeof value !== "undefined") {
      return media[query](css(["", ""], normalize(value)));
    }

    return normalize(value);
  });
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledInlineInner.defaultProps = {
  theme: defaultTheme
};

var Inline = function Inline(_ref4) {
  var _ref4$as = _ref4.as,
      Component = _ref4$as === void 0 ? "div" : _ref4$as,
      mediumMobile = _ref4.mediumMobile,
      largeMobile = _ref4.largeMobile,
      className = _ref4.className,
      tablet = _ref4.tablet,
      desktop = _ref4.desktop,
      largeDesktop = _ref4.largeDesktop,
      children = _ref4.children,
      dataTest = _ref4.dataTest,
      smallMobile = _objectWithoutProperties(_ref4, ["as", "mediumMobile", "largeMobile", "className", "tablet", "desktop", "largeDesktop", "children", "dataTest"]);

  var viewportSizes = {
    smallMobile: smallMobile,
    mediumMobile: mediumMobile,
    largeMobile: largeMobile,
    tablet: tablet,
    desktop: desktop
  };
  return /*#__PURE__*/React.createElement(Component, {
    className: className,
    "data-test": dataTest
  }, /*#__PURE__*/React.createElement(StyledInlineInner, {
    viewportSizes: viewportSizes
  }, children));
};

export default Inline;