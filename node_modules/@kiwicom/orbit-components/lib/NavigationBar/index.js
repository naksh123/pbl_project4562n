"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _transition = _interopRequireDefault(require("../utils/transition"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _MenuHamburger = _interopRequireDefault(require("../icons/MenuHamburger"));

var _ButtonLink = _interopRequireDefault(require("../ButtonLink"));

var _useStateWithCallback3 = _interopRequireDefault(require("../hooks/useStateWithCallback"));

var _useTranslate = _interopRequireDefault(require("../hooks/useTranslate"));

var _mediaQuery = _interopRequireDefault(require("../utils/mediaQuery"));

var NAVBAR_HEIGHT = {
  MOBILE: 52,
  DESKTOP: 64
};

var StyledNavigationBarContent = _styledComponents.default.div.withConfig({
  displayName: "NavigationBar__StyledNavigationBarContent",
  componentId: "sc-17lan40-0"
})(["display:block;width:100%;margin-right:", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.orbit.spaceXSmall;
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledNavigationBarContent.defaultProps = {
  theme: _defaultTheme.default
};

var StyledNavigationBar = _styledComponents.default.nav.withConfig({
  displayName: "NavigationBar__StyledNavigationBar",
  componentId: "sc-17lan40-1"
})(["position:fixed;top:0;left:0;right:0;height:", "px;width:100%;display:flex;align-items:center;background:", ";box-shadow:", ";padding:", ";box-sizing:border-box;z-index:700;transition:", ";transform:translate3d(0,", ",0);", ";"], NAVBAR_HEIGHT.MOBILE, function (_ref2) {
  var theme = _ref2.theme;
  return theme.orbit.paletteWhite;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.orbit.boxShadowFixed;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.orbit.spaceSmall;
}, (0, _transition.default)(["transform"], "normal", "ease-in-out"), function (_ref5) {
  var shown = _ref5.shown;
  return shown ? "0" : "-".concat(NAVBAR_HEIGHT.MOBILE, "px");
}, _mediaQuery.default.tablet((0, _styledComponents.css)(["height:", "px;transform:translate3d(0,", ",0);"], NAVBAR_HEIGHT.DESKTOP, function (_ref6) {
  var shown = _ref6.shown;
  return shown ? "0" : "-".concat(NAVBAR_HEIGHT.DESKTOP, "px");
}))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledNavigationBar.defaultProps = {
  theme: _defaultTheme.default
};

var NavigationBar = function NavigationBar(_ref7) {
  var onMenuOpen = _ref7.onMenuOpen,
      children = _ref7.children,
      dataTest = _ref7.dataTest,
      onShow = _ref7.onShow,
      onHide = _ref7.onHide;
  var translate = (0, _useTranslate.default)();
  var resolveCallback = React.useCallback(function (state) {
    if (onHide && !state) onHide();
    if (onShow && state) onShow();
  }, [onHide, onShow]);

  var _useStateWithCallback = (0, _useStateWithCallback3.default)(true, resolveCallback),
      _useStateWithCallback2 = (0, _slicedToArray2.default)(_useStateWithCallback, 2),
      shown = _useStateWithCallback2[0],
      setShown = _useStateWithCallback2[1];

  var _React$useState = React.useState(0),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      prevScrollPosition = _React$useState2[0],
      setPrevScrollPosition = _React$useState2[1];

  var handleNavigationBarPosition = React.useCallback(function () {
    var currentScrollPosition = window.scrollY || window.pageYOffset || document.documentElement && document.documentElement.scrollTop;

    if (prevScrollPosition < currentScrollPosition && currentScrollPosition > NAVBAR_HEIGHT.DESKTOP) {
      setShown(false);
    } else {
      setShown(true);
    }

    setPrevScrollPosition(currentScrollPosition);
  }, [prevScrollPosition, setShown]);
  React.useEffect(function () {
    window.addEventListener("scroll", handleNavigationBarPosition);
    return function () {
      window.removeEventListener("scroll", handleNavigationBarPosition);
    };
  });
  return /*#__PURE__*/React.createElement(StyledNavigationBar, {
    "data-test": dataTest,
    shown: shown
  }, /*#__PURE__*/React.createElement(StyledNavigationBarContent, null, children), onMenuOpen && /*#__PURE__*/React.createElement(_ButtonLink.default, {
    type: "secondary",
    onClick: onMenuOpen,
    iconLeft: /*#__PURE__*/React.createElement(_MenuHamburger.default, null),
    title: translate("navigationbar_open_menu")
  }));
};

var _default = NavigationBar;
exports.default = _default;