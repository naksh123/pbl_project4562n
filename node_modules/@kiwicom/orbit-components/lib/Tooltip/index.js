"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _consts = require("./consts");

var _TooltipPrimitive = _interopRequireDefault(require("../primitives/TooltipPrimitive"));

var _useMediaQuery2 = _interopRequireDefault(require("../hooks/useMediaQuery"));

var _MobileDialogPrimitive = _interopRequireDefault(require("../primitives/MobileDialogPrimitive"));

var Tooltip = function Tooltip(_ref) {
  var children = _ref.children,
      _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? true : _ref$enabled,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? "0" : _ref$tabIndex,
      dataTest = _ref.dataTest,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? _consts.SIZE_OPTIONS.SMALL : _ref$size,
      content = _ref.content,
      preferredPosition = _ref.preferredPosition,
      _ref$renderInPortal = _ref.renderInPortal,
      renderInPortal = _ref$renderInPortal === void 0 ? true : _ref$renderInPortal,
      preferredAlign = _ref.preferredAlign,
      _ref$stopPropagation = _ref.stopPropagation,
      stopPropagation = _ref$stopPropagation === void 0 ? false : _ref$stopPropagation,
      removeUnderlinedText = _ref.removeUnderlinedText,
      _ref$block = _ref.block,
      block = _ref$block === void 0 ? false : _ref$block;

  var _useMediaQuery = (0, _useMediaQuery2.default)(),
      isLargeMobile = _useMediaQuery.isLargeMobile;

  return isLargeMobile ? /*#__PURE__*/React.createElement(_TooltipPrimitive.default, {
    dataTest: dataTest,
    tabIndex: tabIndex,
    enabled: enabled,
    content: content,
    size: size,
    renderInPortal: renderInPortal,
    preferredPosition: preferredPosition,
    preferredAlign: preferredAlign,
    stopPropagation: stopPropagation,
    removeUnderlinedText: removeUnderlinedText,
    block: block
  }, children) : /*#__PURE__*/React.createElement(_MobileDialogPrimitive.default, {
    dataTest: dataTest,
    tabIndex: tabIndex,
    enabled: enabled,
    content: content,
    removeUnderlinedText: removeUnderlinedText,
    stopPropagation: stopPropagation,
    block: block
  }, children);
};

var _default = Tooltip;
exports.default = _default;