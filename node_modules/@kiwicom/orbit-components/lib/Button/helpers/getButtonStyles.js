"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _consts = require("../../primitives/ButtonPrimitive/common/consts");

var _getButtonTypeToken = _interopRequireDefault(require("./getButtonTypeToken"));

var _consts2 = require("../consts");

var _getButtonBoxShadow = _interopRequireDefault(require("./getButtonBoxShadow"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getButtonStyles = function getButtonStyles(_ref) {
  var disabled = _ref.disabled,
      theme = _ref.theme,
      type = _ref.type;

  var wrappedBoxShadow = function wrappedBoxShadow(state) {
    return (0, _getButtonBoxShadow.default)(state, disabled, theme, type);
  };

  var wrappedTypeToken = function wrappedTypeToken(name) {
    return (0, _getButtonTypeToken.default)(name, type, theme);
  };

  var boxShadow = {
    boxShadow: wrappedBoxShadow(_consts.BUTTON_STATES.DEFAULT),
    boxShadowHover: wrappedBoxShadow(_consts.BUTTON_STATES.HOVER),
    boxShadowActive: wrappedBoxShadow(_consts.BUTTON_STATES.ACTIVE),
    boxShadowFocus: wrappedBoxShadow(_consts.BUTTON_STATES.FOCUS)
  };
  return _objectSpread({
    background: wrappedTypeToken(_consts2.TOKENS.backgroundButton),
    backgroundHover: wrappedTypeToken(_consts2.TOKENS.backgroundButtonHover),
    backgroundActive: wrappedTypeToken(_consts2.TOKENS.backgroundButtonActive),
    backgroundFocus: null,
    foreground: wrappedTypeToken(_consts2.TOKENS.colorTextButton),
    foregroundHover: wrappedTypeToken(_consts2.TOKENS.colorTextButtonHover),
    foregroundActive: wrappedTypeToken(_consts2.TOKENS.colorTextButtonActive)
  }, boxShadow);
};

var _default = getButtonStyles;
exports.default = _default;