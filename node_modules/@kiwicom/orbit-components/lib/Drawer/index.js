"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _convertHexToRgba = _interopRequireDefault(require("@kiwicom/orbit-design-tokens/lib/convertHexToRgba"));

var _transition = _interopRequireDefault(require("../utils/transition"));

var _mediaQuery = _interopRequireDefault(require("../utils/mediaQuery"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _DrawerClose = _interopRequireDefault(require("./components/DrawerClose"));

var _consts = _interopRequireDefault(require("./consts"));

var _getPosition = _interopRequireDefault(require("./helpers/getPosition"));

var _getTransitionAnimation = _interopRequireDefault(require("./helpers/getTransitionAnimation"));

var _useTheme = _interopRequireDefault(require("../hooks/useTheme"));

var _Stack = _interopRequireDefault(require("../Stack"));

var _useStateWithTimeout3 = _interopRequireDefault(require("../hooks/useStateWithTimeout"));

var _Heading = _interopRequireDefault(require("../Heading"));

var _rtl = require("../utils/rtl");

var getPadding = function getPadding(_ref) {
  var noPadding = _ref.noPadding,
      theme = _ref.theme,
      hasTopPadding = _ref.hasTopPadding;

  var padding = function padding(space) {
    return !hasTopPadding ? (0, _rtl.rtlSpacing)("0 ".concat(space, " ").concat(space)) : space;
  };

  return !noPadding && (0, _styledComponents.css)(["padding:", ";", ";"], padding(theme.orbit.spaceMedium), _mediaQuery.default.largeMobile((0, _styledComponents.css)(["padding:", "};"], padding(theme.orbit.spaceXLarge))));
};

var StyledDrawer = _styledComponents.default.div.withConfig({
  displayName: "Drawer__StyledDrawer",
  componentId: "sc-1auf65o-0"
})(["display:flex;visibility:", ";position:fixed;top:0;left:0;right:0;bottom:0;width:100%;height:100%;background-color:", ";z-index:825;transition:", ";"], function (_ref2) {
  var overlayShown = _ref2.overlayShown;
  return overlayShown ? "visible" : "hidden";
}, function (_ref3) {
  var theme = _ref3.theme,
      shown = _ref3.shown;
  return shown ? (0, _convertHexToRgba.default)(theme.orbit.paletteInkNormal, 50) : "transparent";
}, (0, _transition.default)(["background-color"], "fast", "ease-in-out")); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledDrawer.defaultProps = {
  theme: _defaultTheme.default
};
var StyledDrawerSide = (0, _styledComponents.default)(function (_ref4) {
  var theme = _ref4.theme,
      width = _ref4.width,
      position = _ref4.position,
      shown = _ref4.shown,
      suppressed = _ref4.suppressed,
      props = (0, _objectWithoutProperties2.default)(_ref4, ["theme", "width", "position", "shown", "suppressed"]);
  return /*#__PURE__*/React.createElement("aside", props);
}).withConfig({
  displayName: "Drawer__StyledDrawerSide",
  componentId: "sc-1auf65o-1"
})(["display:block;position:absolute;box-sizing:border-box;top:0;bottom:0;height:100%;font-family:", ";overflow-y:auto;box-shadow:", ";background:", ";transition:", ";width:100%;", ";", ";", ";"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.orbit.fontFamily;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.orbit.boxShadowRaised;
}, function (_ref7) {
  var theme = _ref7.theme,
      suppressed = _ref7.suppressed;
  return suppressed ? theme.orbit.paletteCloudLight : theme.orbit.paletteWhite;
}, (0, _transition.default)(["transform"], "normal", "ease-in-out"), _mediaQuery.default.largeMobile((0, _styledComponents.css)(["max-width:", ";"], function (_ref8) {
  var width = _ref8.width;
  return width;
})), _getPosition.default, _getTransitionAnimation.default); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledDrawerSide.defaultProps = {
  theme: _defaultTheme.default
};
var StyledDrawerContent = (0, _styledComponents.default)(function (_ref9) {
  var theme = _ref9.theme,
      type = _ref9.type,
      hasTopPadding = _ref9.hasTopPadding,
      noPadding = _ref9.noPadding,
      hasClose = _ref9.hasClose,
      props = (0, _objectWithoutProperties2.default)(_ref9, ["theme", "type", "hasTopPadding", "noPadding", "hasClose"]);
  return /*#__PURE__*/React.createElement("div", props);
}).withConfig({
  displayName: "Drawer__StyledDrawerContent",
  componentId: "sc-1auf65o-2"
})(["", ";margin-bottom:", ";margin-top:", ";"], getPadding, function (_ref10) {
  var theme = _ref10.theme,
      noPadding = _ref10.noPadding;
  return noPadding && theme.orbit.spaceLarge;
}, function (_ref11) {
  var hasClose = _ref11.hasClose,
      theme = _ref11.theme,
      noPadding = _ref11.noPadding;
  return !hasClose && noPadding && theme.orbit.spaceLarge;
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

StyledDrawerContent.defaultProps = {
  theme: _defaultTheme.default
};

var StyledDrawerHeader = _styledComponents.default.div.withConfig({
  displayName: "Drawer__StyledDrawerHeader",
  componentId: "sc-1auf65o-3"
})(["display:flex;justify-content:", ";align-items:center;background:", ";height:64px;box-sizing:border-box;", ";", ";"], function (_ref12) {
  var onlyIcon = _ref12.onlyIcon;
  return onlyIcon ? "flex-end" : "space-between";
}, function (_ref13) {
  var suppressed = _ref13.suppressed,
      bordered = _ref13.bordered,
      theme = _ref13.theme;
  return suppressed && !bordered ? theme.orbit.paletteCloudLight : theme.orbit.paletteWhite;
}, function (_ref14) {
  var bordered = _ref14.bordered,
      theme = _ref14.theme;
  return bordered && (0, _styledComponents.css)(["border-bottom:1px solid ", ";"], theme.orbit.paletteCloudNormal);
}, function (_ref15) {
  var noPadding = _ref15.noPadding,
      theme = _ref15.theme;
  return !noPadding && (0, _styledComponents.css)(["padding:0 ", ";", ";"], theme.orbit.spaceMedium, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["padding:", ";"], (0, _rtl.rtlSpacing)("0 ".concat(theme.orbit.spaceLarge, " 0 ").concat(theme.orbit.spaceXLarge)))));
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledDrawerHeader.defaultProps = {
  theme: _defaultTheme.default
};

var Drawer = function Drawer(_ref16) {
  var children = _ref16.children,
      onClose = _ref16.onClose,
      _ref16$shown = _ref16.shown,
      shown = _ref16$shown === void 0 ? true : _ref16$shown,
      _ref16$width = _ref16.width,
      width = _ref16$width === void 0 ? "320px" : _ref16$width,
      _ref16$position = _ref16.position,
      position = _ref16$position === void 0 ? _consts.default.RIGHT : _ref16$position,
      dataTest = _ref16.dataTest,
      noPadding = _ref16.noPadding,
      suppressed = _ref16.suppressed,
      title = _ref16.title,
      actions = _ref16.actions;
  var theme = (0, _useTheme.default)();
  var overlayRef = React.useRef(null);
  var timeoutLength = React.useMemo(function () {
    return parseFloat(theme.orbit.durationNormal) * 1000;
  }, [theme.orbit.durationNormal]);

  var _useStateWithTimeout = (0, _useStateWithTimeout3.default)(shown, timeoutLength),
      _useStateWithTimeout2 = (0, _slicedToArray2.default)(_useStateWithTimeout, 3),
      overlayShown = _useStateWithTimeout2[0],
      setOverlayShown = _useStateWithTimeout2[1],
      setOverlayShownWithTimeout = _useStateWithTimeout2[2];

  var handleOnClose = React.useCallback(function (ev) {
    if (onClose && ev.target === overlayRef.current) {
      onClose();
    }
  }, [onClose]);
  React.useEffect(function () {
    if (overlayShown !== shown) {
      if (shown) {
        setOverlayShown(true);
      } else if (!shown) {
        setOverlayShownWithTimeout(false);
      }
    }
  }, [overlayShown, setOverlayShown, setOverlayShownWithTimeout, shown]);
  return /*#__PURE__*/React.createElement(StyledDrawer, {
    role: "button",
    overlayShown: overlayShown,
    shown: shown,
    onClick: handleOnClose,
    "data-test": dataTest,
    "aria-hidden": !shown,
    ref: overlayRef
  }, /*#__PURE__*/React.createElement(StyledDrawerSide, {
    shown: shown,
    width: width,
    position: position,
    role: "navigation",
    suppressed: suppressed
  }, (title || actions || onClose) && /*#__PURE__*/React.createElement(StyledDrawerHeader, {
    onlyIcon: !title && !actions,
    bordered: title || actions,
    suppressed: suppressed
  }, title && /*#__PURE__*/React.createElement(_Heading.default, {
    type: "title2"
  }, title), actions && /*#__PURE__*/React.createElement(_Stack.default, {
    spacing: "none",
    justify: "end",
    flex: true,
    shrink: true
  }, actions), onClose && /*#__PURE__*/React.createElement(_DrawerClose.default, {
    onClick: onClose
  })), /*#__PURE__*/React.createElement(StyledDrawerContent, {
    noPadding: noPadding,
    hasClose: !!onClose,
    hasTopPadding: title || actions
  }, children)));
};

var _default = Drawer;
exports.default = _default;