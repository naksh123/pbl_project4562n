"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _consts = require("../utils/mediaQuery/consts");

var _mediaQuery = _interopRequireDefault(require("../utils/mediaQuery"));

var _helpers = require("./helpers");

var StyledInlineInner = _styledComponents.default.div.withConfig({
  displayName: "Inline__StyledInlineInner",
  componentId: "sc-1ygdv81-0"
})(["display:flex;flex-direction:row;flex-wrap:wrap;", ""], function (_ref) {
  var viewportSizes = _ref.viewportSizes;
  return Object.entries(viewportSizes).map(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
        query = _ref3[0],
        value = _ref3[1];

    if (query !== _consts.DEVICES[0] && typeof value !== "undefined") {
      return _mediaQuery.default[query]((0, _styledComponents.css)(["", ""], (0, _helpers.normalize)(value)));
    }

    return (0, _helpers.normalize)(value);
  });
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


StyledInlineInner.defaultProps = {
  theme: _defaultTheme.default
};

var Inline = function Inline(_ref4) {
  var _ref4$as = _ref4.as,
      Component = _ref4$as === void 0 ? "div" : _ref4$as,
      mediumMobile = _ref4.mediumMobile,
      largeMobile = _ref4.largeMobile,
      className = _ref4.className,
      tablet = _ref4.tablet,
      desktop = _ref4.desktop,
      largeDesktop = _ref4.largeDesktop,
      children = _ref4.children,
      dataTest = _ref4.dataTest,
      smallMobile = (0, _objectWithoutProperties2.default)(_ref4, ["as", "mediumMobile", "largeMobile", "className", "tablet", "desktop", "largeDesktop", "children", "dataTest"]);
  var viewportSizes = {
    smallMobile: smallMobile,
    mediumMobile: mediumMobile,
    largeMobile: largeMobile,
    tablet: tablet,
    desktop: desktop
  };
  return /*#__PURE__*/React.createElement(Component, {
    className: className,
    "data-test": dataTest
  }, /*#__PURE__*/React.createElement(StyledInlineInner, {
    viewportSizes: viewportSizes
  }, children));
};

var _default = Inline;
exports.default = _default;