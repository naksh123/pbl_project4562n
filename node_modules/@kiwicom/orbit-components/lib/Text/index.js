"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StyledText = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _consts = require("./consts");

var _getSpacingToken = _interopRequireDefault(require("../common/getSpacingToken"));

var _rtl = require("../utils/rtl");

var _TextLink = require("../TextLink");

var getTypeToken = function getTypeToken(_ref) {
  var _typeTokens;

  var theme = _ref.theme,
      type = _ref.type;
  var typeTokens = (_typeTokens = {}, (0, _defineProperty2.default)(_typeTokens, _consts.TYPE_OPTIONS.PRIMARY, theme.orbit.colorTextPrimary), (0, _defineProperty2.default)(_typeTokens, _consts.TYPE_OPTIONS.SECONDARY, theme.orbit.colorTextSecondary), (0, _defineProperty2.default)(_typeTokens, _consts.TYPE_OPTIONS.INFO, theme.orbit.colorTextInfo), (0, _defineProperty2.default)(_typeTokens, _consts.TYPE_OPTIONS.SUCCESS, theme.orbit.colorTextSuccess), (0, _defineProperty2.default)(_typeTokens, _consts.TYPE_OPTIONS.WARNING, theme.orbit.colorTextWarning), (0, _defineProperty2.default)(_typeTokens, _consts.TYPE_OPTIONS.CRITICAL, theme.orbit.colorTextCritical), (0, _defineProperty2.default)(_typeTokens, _consts.TYPE_OPTIONS.WHITE, theme.orbit.colorTextWhite), _typeTokens);
  return typeTokens[type];
};

var getWeightToken = function getWeightToken(_ref2) {
  var _weightTokens;

  var theme = _ref2.theme,
      weight = _ref2.weight;
  var weightTokens = (_weightTokens = {}, (0, _defineProperty2.default)(_weightTokens, _consts.WEIGHT_OPTIONS.NORMAL, theme.orbit.fontWeightNormal), (0, _defineProperty2.default)(_weightTokens, _consts.WEIGHT_OPTIONS.BOLD, theme.orbit.fontWeightBold), _weightTokens);
  return weightTokens[weight];
};

var getSizeToken = function getSizeToken(_ref3) {
  var _sizeTokens;

  var theme = _ref3.theme,
      size = _ref3.size;
  var sizeTokens = (_sizeTokens = {}, (0, _defineProperty2.default)(_sizeTokens, _consts.SIZE_OPTIONS.LARGE, theme.orbit.fontSizeTextLarge), (0, _defineProperty2.default)(_sizeTokens, _consts.SIZE_OPTIONS.NORMAL, theme.orbit.fontSizeTextNormal), (0, _defineProperty2.default)(_sizeTokens, _consts.SIZE_OPTIONS.SMALL, theme.orbit.fontSizeTextSmall), _sizeTokens);
  return sizeTokens[size];
};

var getLineHeightToken = function getLineHeightToken(_ref4) {
  var _lineHeightTokens;

  var theme = _ref4.theme,
      size = _ref4.size;
  var lineHeightTokens = (_lineHeightTokens = {}, (0, _defineProperty2.default)(_lineHeightTokens, _consts.SIZE_OPTIONS.LARGE, theme.orbit.lineHeightTextLarge), (0, _defineProperty2.default)(_lineHeightTokens, _consts.SIZE_OPTIONS.NORMAL, theme.orbit.lineHeightTextNormal), (0, _defineProperty2.default)(_lineHeightTokens, _consts.SIZE_OPTIONS.SMALL, theme.orbit.lineHeightTextSmall), _lineHeightTokens);
  return lineHeightTokens[size];
};

var StyledText = (0, _styledComponents.default)(function (_ref5) {
  var TextElement = _ref5.element,
      children = _ref5.children,
      className = _ref5.className,
      dataTest = _ref5.dataTest,
      id = _ref5.id;
  return /*#__PURE__*/React.createElement(TextElement, {
    className: className,
    "data-test": dataTest,
    id: id
  }, children);
}).withConfig({
  displayName: "Text__StyledText",
  componentId: "sc-19qtt4y-0"
})(["font-family:", ";font-size:", ";font-weight:", ";color:", ";line-height:", ";text-align:", ";text-transform:", ";font-style:", ";margin:0;margin-bottom:", ";a:not(", "){", "}"], function (_ref6) {
  var theme = _ref6.theme;
  return theme.orbit.fontFamily;
}, getSizeToken, getWeightToken, getTypeToken, getLineHeightToken, function (_ref7) {
  var align = _ref7.align;
  return (0, _rtl.textAlign)(align);
}, function (_ref8) {
  var uppercase = _ref8.uppercase;
  return uppercase && "uppercase";
}, function (_ref9) {
  var italic = _ref9.italic;
  return italic && "italic";
}, _getSpacingToken.default, _TextLink.StyledTextLink, function (_ref10) {
  var theme = _ref10.theme,
      type = _ref10.type;
  return (0, _TextLink.getLinkStyle)({
    theme: theme,
    type: type
  });
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

exports.StyledText = StyledText;
StyledText.defaultProps = {
  theme: _defaultTheme.default
};

var Text = function Text(_ref11) {
  var _ref11$type = _ref11.type,
      type = _ref11$type === void 0 ? _consts.TYPE_OPTIONS.PRIMARY : _ref11$type,
      _ref11$size = _ref11.size,
      size = _ref11$size === void 0 ? _consts.SIZE_OPTIONS.NORMAL : _ref11$size,
      _ref11$weight = _ref11.weight,
      weight = _ref11$weight === void 0 ? _consts.WEIGHT_OPTIONS.NORMAL : _ref11$weight,
      _ref11$align = _ref11.align,
      align = _ref11$align === void 0 ? _consts.ALIGN_OPTIONS.LEFT : _ref11$align,
      _ref11$as = _ref11.as,
      as = _ref11$as === void 0 ? _consts.ELEMENT_OPTIONS.P : _ref11$as,
      _ref11$uppercase = _ref11.uppercase,
      uppercase = _ref11$uppercase === void 0 ? false : _ref11$uppercase,
      _ref11$italic = _ref11.italic,
      italic = _ref11$italic === void 0 ? false : _ref11$italic,
      dataTest = _ref11.dataTest,
      spaceAfter = _ref11.spaceAfter,
      children = _ref11.children,
      id = _ref11.id;
  return /*#__PURE__*/React.createElement(StyledText, {
    id: id,
    type: type,
    size: size,
    weight: weight,
    align: align,
    element: as,
    uppercase: uppercase,
    italic: italic,
    dataTest: dataTest,
    spaceAfter: spaceAfter
  }, children);
};

var _default = Text;
exports.default = _default;