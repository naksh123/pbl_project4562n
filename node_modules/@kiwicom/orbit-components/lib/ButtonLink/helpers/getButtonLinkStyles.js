"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _consts = require("../consts");

var _getButtonLinkTypeToken = _interopRequireDefault(require("./getButtonLinkTypeToken"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getButtonLinkStyles = function getButtonLinkStyles(_ref) {
  var type = _ref.type,
      theme = _ref.theme,
      compact = _ref.compact;

  var wrappedTypeToken = function wrappedTypeToken(name) {
    return (0, _getButtonLinkTypeToken.default)(name, type, theme);
  };

  var commonStyles = {
    background: wrappedTypeToken(_consts.TOKENS.background),
    foreground: wrappedTypeToken(_consts.TOKENS.foreground),
    foregroundHover: wrappedTypeToken(_consts.TOKENS.foregroundHover),
    foregroundActive: wrappedTypeToken(_consts.TOKENS.foregroundActive),
    foregroundFocus: wrappedTypeToken(_consts.TOKENS.foregroundActive)
  };

  if (compact) {
    if (type === _consts.TYPES.SECONDARY) {
      var wrappedPrimaryType = function wrappedPrimaryType(name) {
        return (0, _getButtonLinkTypeToken.default)(name, _consts.TYPES.PRIMARY, theme);
      };

      return _objectSpread(_objectSpread({}, commonStyles), {}, {
        foregroundHover: wrappedPrimaryType(_consts.TOKENS.foregroundHover),
        foregroundActive: wrappedPrimaryType(_consts.TOKENS.foregroundActive),
        foregroundFocus: wrappedPrimaryType(_consts.TOKENS.foregroundActive)
      });
    }

    return commonStyles;
  }

  return _objectSpread({
    backgroundHover: wrappedTypeToken(_consts.TOKENS.backgroundHover),
    backgroundActive: wrappedTypeToken(_consts.TOKENS.backgroundActive),
    backgroundFocus: wrappedTypeToken(_consts.TOKENS.backgroundActive)
  }, commonStyles);
};

var _default = getButtonLinkStyles;
exports.default = _default;