"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _consts = require("./consts");

var _rtl = require("../../../utils/rtl");

var _Icon = require("../../../Icon");

var _consts2 = require("../../../Icon/consts");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getIconSpacing = function getIconSpacing(onlyIcon, size, theme) {
  var _TOKENS$marginRightIc;

  if (onlyIcon) {
    return null;
  }

  var tokens = (0, _defineProperty2.default)({}, _consts.TOKENS.marginRightIcon, (_TOKENS$marginRightIc = {}, (0, _defineProperty2.default)(_TOKENS$marginRightIc, _consts.SIZE_OPTIONS.LARGE, theme.orbit.marginButtonIconLarge), (0, _defineProperty2.default)(_TOKENS$marginRightIc, _consts.SIZE_OPTIONS.NORMAL, theme.orbit.marginButtonIconNormal), (0, _defineProperty2.default)(_TOKENS$marginRightIc, _consts.SIZE_OPTIONS.SMALL, theme.orbit.marginButtonIconSmall), _TOKENS$marginRightIc));
  return {
    leftMargin: (0, _rtl.rtlSpacing)("0 ".concat(tokens[_consts.TOKENS.marginRightIcon][size], " 0 0"))({
      theme: theme
    }),
    rightMargin: (0, _rtl.rtlSpacing)("0 0 0 ".concat(tokens[_consts.TOKENS.marginRightIcon][size]))({
      theme: theme
    })
  };
};

var getIconContainer = function getIconContainer(_ref) {
  var iconLeft = _ref.iconLeft,
      children = _ref.children,
      theme = _ref.theme,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? _consts.SIZE_OPTIONS.NORMAL : _ref$size,
      iconForeground = _ref.iconForeground;
  var onlyIcon = Boolean(iconLeft && !children);
  var sizeIcon = size === _consts2.ICON_SIZES.SMALL ? _consts2.ICON_SIZES.SMALL : _consts2.ICON_SIZES.MEDIUM;
  var computedSize = (0, _Icon.getSize)(sizeIcon)({
    theme: theme
  });
  return {
    icons: _objectSpread(_objectSpread({
      height: computedSize,
      width: computedSize
    }, getIconSpacing(onlyIcon, size, theme)), iconForeground)
  };
};

var _default = getIconContainer;
exports.default = _default;