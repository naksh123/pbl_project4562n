"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Label = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _convertHexToRgba = _interopRequireDefault(require("@kiwicom/orbit-design-tokens/lib/convertHexToRgba"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _consts = _interopRequireDefault(require("./consts"));

var _Check = _interopRequireDefault(require("../icons/Check"));

var _Text = require("../Text");

var _rtl = require("../utils/rtl");

var _getFieldDataState = _interopRequireDefault(require("../common/getFieldDataState"));

var _cloneWithTooltip = _interopRequireDefault(require("../utils/cloneWithTooltip"));

var _mediaQuery = _interopRequireDefault(require("../utils/mediaQuery"));

var getToken = function getToken(name) {
  return function (_ref) {
    var _tokens;

    var theme = _ref.theme,
        hasError = _ref.hasError,
        disabled = _ref.disabled,
        checked = _ref.checked;

    var resolveBorderColor = function resolveBorderColor() {
      if (disabled) {
        return theme.orbit.paletteInkLighter;
      }

      if (checked) {
        return theme.orbit.paletteBlueNormal;
      }

      if (hasError && !disabled && !checked) {
        return theme.orbit.borderColorCheckboxRadioError;
      }

      return theme.orbit.borderColorCheckboxRadio;
    };

    var getBackground = function getBackground() {
      if (disabled && checked) {
        return theme.orbit.paletteInkLighter;
      }

      if (disabled && !checked) {
        return theme.orbit.paletteCloudNormal;
      }

      return checked ? theme.orbit.paletteBlueNormal : theme.orbit.backgroundInput;
    };

    var tokens = (_tokens = {}, (0, _defineProperty2.default)(_tokens, _consts.default.background, getBackground()), (0, _defineProperty2.default)(_tokens, _consts.default.borderColor, resolveBorderColor()), (0, _defineProperty2.default)(_tokens, _consts.default.iconColor, disabled ? theme.orbit.paletteCloudNormal : theme.orbit.colorIconCheckboxRadio), _tokens);
    return tokens[name];
  };
};

var IconContainer = _styledComponents.default.div.withConfig({
  displayName: "Checkbox__IconContainer",
  componentId: "sc-1x6twh3-0"
})(["position:relative;box-sizing:border-box;flex:0 0 auto;display:flex;align-items:center;justify-content:center;background-color:", ";height:", ";width:", ";border-radius:", ";transform:scale(1);transition:all ", " ease-in-out;& > svg{visibility:hidden;display:flex;align-items:center;justify-content:center;width:16px;height:16px;}&:hover{background-color:", ";}", ""], getToken(_consts.default.background), function (_ref2) {
  var theme = _ref2.theme;
  return theme.orbit.heightCheckbox;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.orbit.widthCheckbox;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.orbit.borderRadiusLarge;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.orbit.durationFast;
}, function (_ref6) {
  var theme = _ref6.theme,
      checked = _ref6.checked;
  return checked ? theme.orbit.paletteBlueDark : theme.orbit.backgroundInput;
}, _mediaQuery.default.tablet((0, _styledComponents.css)(["border-radius:", ";"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.orbit.borderRadiusNormal;
}))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


IconContainer.defaultProps = {
  theme: _defaultTheme.default
};

var TextContainer = _styledComponents.default.div.withConfig({
  displayName: "Checkbox__TextContainer",
  componentId: "sc-1x6twh3-1"
})(["display:flex;flex-direction:column;margin:", ";flex:1;"], function (_ref8) {
  var theme = _ref8.theme;
  return (0, _rtl.rtlSpacing)("0 0 0 ".concat(theme.orbit.spaceXSmall));
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


TextContainer.defaultProps = {
  theme: _defaultTheme.default
};

var Info = _styledComponents.default.span.withConfig({
  displayName: "Checkbox__Info",
  componentId: "sc-1x6twh3-2"
})(["font-size:", ";color:", ";line-height:", ";"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.orbit.fontSizeFormFeedback;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.orbit.colorInfoCheckBoxRadio;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.orbit.lineHeightTextSmall;
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


Info.defaultProps = {
  theme: _defaultTheme.default
};

var LabelText = _styledComponents.default.span.withConfig({
  displayName: "Checkbox__LabelText",
  componentId: "sc-1x6twh3-3"
})(["font-family:", ";font-weight:", ";font-size:", ";color:", ";line-height:", ";", "{font-weight:", ";font-size:", ";color:", ";line-height:", ";}"], function (_ref12) {
  var theme = _ref12.theme;
  return theme.orbit.fontFamily;
}, function (_ref13) {
  var theme = _ref13.theme;
  return theme.orbit.fontWeightNormal;
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.orbit.fontSizeFormLabel;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.orbit.colorFormLabel;
}, function (_ref16) {
  var theme = _ref16.theme;
  return theme.orbit.heightCheckbox;
}, _Text.StyledText, function (_ref17) {
  var theme = _ref17.theme;
  return theme.orbit.fontWeightNormal;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.orbit.fontSizeFormLabel;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.orbit.colorFormLabel;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.orbit.heightCheckbox;
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


LabelText.defaultProps = {
  theme: _defaultTheme.default
};

var Input = _styledComponents.default.input.withConfig({
  displayName: "Checkbox__Input",
  componentId: "sc-1x6twh3-4"
})(["opacity:0;z-index:-1;position:absolute;&:checked ~ ", " > ", "{font-weight:", ";& > ", "{font-weight:", ";}}&:checked + ", " > svg{visibility:visible;}&:focus + ", "{border:", ";box-shadow:0 0 0 3px ", ";}"], TextContainer, LabelText, function (_ref21) {
  var theme = _ref21.theme;
  return theme.orbit.fontWeightMedium;
}, _Text.StyledText, function (_ref22) {
  var theme = _ref22.theme;
  return theme.orbit.fontWeightMedium;
}, IconContainer, IconContainer, function (_ref23) {
  var theme = _ref23.theme,
      error = _ref23.error;
  return "1px ".concat(theme.orbit.borderStyleInput, " ").concat(error ? theme.orbit.paletteRedNormal : theme.orbit.borderColorCheckboxRadioFocus);
}, function (_ref24) {
  var theme = _ref24.theme,
      error = _ref24.error;
  return (0, _convertHexToRgba.default)(error ? theme.orbit.paletteRedNormal : theme.orbit.borderColorInputFocus, 15);
}); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198


Input.defaultProps = {
  theme: _defaultTheme.default
};
var Label = (0, _styledComponents.default)(function (_ref25) {
  var className = _ref25.className,
      children = _ref25.children,
      dataTest = _ref25.dataTest;
  return /*#__PURE__*/React.createElement("label", {
    className: className,
    "data-test": dataTest
  }, children);
}).withConfig({
  displayName: "Checkbox__Label",
  componentId: "sc-1x6twh3-5"
})(["font-family:", ";display:flex;width:100%;flex-direction:row;align-items:self-start;opacity:", ";cursor:", ";position:relative;", "{color:", ";border:2px solid ", ";}&:hover ", "{border-color:", ";box-shadow:none;}&:active ", "{border-color:", ";transform:", ";}", ";"], function (_ref26) {
  var theme = _ref26.theme;
  return theme.orbit.fontFamily;
}, function (_ref27) {
  var disabled = _ref27.disabled,
      theme = _ref27.theme;
  return disabled ? theme.orbit.opacityCheckboxDisabled : "1";
}, function (_ref28) {
  var disabled = _ref28.disabled;
  return disabled ? "not-allowed" : "pointer";
}, IconContainer, getToken(_consts.default.iconColor), getToken(_consts.default.borderColor), IconContainer, function (_ref29) {
  var disabled = _ref29.disabled,
      theme = _ref29.theme,
      checked = _ref29.checked;
  return !disabled && checked ? theme.orbit.paletteBlueDark : theme.orbit.paletteBlueLightActive;
}, IconContainer, function (_ref30) {
  var disabled = _ref30.disabled,
      theme = _ref30.theme;
  return disabled ? getToken(_consts.default.borderColor) : theme.orbit.paletteBlueNormal;
}, function (_ref31) {
  var disabled = _ref31.disabled,
      theme = _ref31.theme;
  return !disabled && "scale(".concat(theme.orbit.modifierScaleCheckboxRadioActive, ")");
}, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["", "{border-width:1px;}"], IconContainer))); // $FlowFixMe: https://github.com/flow-typed/flow-typed/issues/3653#issuecomment-568539198

exports.Label = Label;
Label.defaultProps = {
  theme: _defaultTheme.default
};
var Checkbox = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var label = props.label,
      value = props.value,
      _props$hasError = props.hasError,
      hasError = _props$hasError === void 0 ? false : _props$hasError,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$checked = props.checked,
      checked = _props$checked === void 0 ? false : _props$checked,
      name = props.name,
      onChange = props.onChange,
      dataTest = props.dataTest,
      info = props.info,
      readOnly = props.readOnly,
      tabIndex = props.tabIndex,
      tooltip = props.tooltip;
  var preventOnClick = React.useCallback(function (ev) {
    ev.preventDefault();
  }, []);
  return /*#__PURE__*/React.createElement(Label, {
    disabled: disabled,
    hasError: hasError,
    checked: checked
  }, /*#__PURE__*/React.createElement(Input, {
    "data-test": dataTest,
    "data-state": (0, _getFieldDataState.default)(!!hasError),
    value: value,
    type: "checkbox",
    disabled: disabled,
    name: name,
    tabIndex: tabIndex,
    checked: checked,
    onChange: onChange,
    ref: ref,
    readOnly: readOnly,
    error: hasError
  }), (0, _cloneWithTooltip.default)(tooltip, /*#__PURE__*/React.createElement(IconContainer, {
    disabled: disabled,
    checked: checked,
    onClick: readOnly ? preventOnClick : null
  }, /*#__PURE__*/React.createElement(_Check.default, {
    customColor: "white"
  }))), (label || info) && /*#__PURE__*/React.createElement(TextContainer, null, label && /*#__PURE__*/React.createElement(LabelText, null, label), info && /*#__PURE__*/React.createElement(Info, null, info)));
});
Checkbox.displayName = "Checkbox";
var _default = Checkbox;
exports.default = _default;